<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesAnalytics">
	<select id="getListDeviceBySite" resultType="com.nwm.api.entities.SitesDevicesEntity" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.serial_number,
			d.id,
			d.id_site,
			d.id_device_group,
			d.devicename,
			d.view_tablename,
			d.job_tablename,
			d.datatablename AS datatablename, 
			dg.group_name,
			d.id AS id_device,
			d.id_device_type,
			d.hidden,
			1 AS is_paramerter_expand,
			1 AS is_calculation_expand,
			1 AS is_hidden,
			0 AS is_checked
		FROM
			device d
			LEFT JOIN device_group dg ON d.id_device_group = dg.id
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0 AND s.status = 1
	</select>
	
	<select id="getListDeviceParameter" resultType="com.nwm.api.entities.DeviceParameterEntity" parameterType="com.nwm.api.entities.DeviceParameterEntity">
		SELECT
			dp.id,
			dp.`name`,
			dp.standard_name,
			dp.slug,
			dp.unit,
			dp.value_chart_tool,
			dp.chart_type,
			dp.description,
			dp.register,
			dp.hide,
			dp.standard_alert_message,
			d.id AS id_device,
			d.id_device_type,
			d.id_device_group,
			dp.is_checked,
			dp.is_calculation,
			dp.is_common,
			dp.menu_order
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group 
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
		WHERE
			d.id = #{id} AND d.`status` = 1 AND dp.is_delete = 0 AND dp.`status` = 1 AND dp.is_filter = 1 ORDER BY menu_order DESC;
	</select>
	
	<select id="getHiddenDataListByDevice" resultType="Map">
		SELECT
			date_from,
			date_to
		FROM
			hidden_data
		WHERE
			id_device = #{id}
			AND status = 1
			AND is_delete = 0
	</select>
	
	<select id="getDeviceGroupsList" resultType="Map">
		SELECT
			table_name
		FROM
			device_group
		WHERE
			`status` = 1
			AND is_delete = 0
	</select>
	
	<select id="getDataChartParameter" resultType="Map">
		SELECT
			dv.time,
			dv.id_device,
			0 AS is_checked,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group,
			
			<if test="table_name == 'model_elster_a1700'">
				IFNULL(ROUND(AVG(dv.PhaseAVoltage), 2), 0.001) AS PhaseAVoltage,
				IFNULL(ROUND(AVG(dv.PhaseBVoltage), 2), 0.001) AS PhaseBVoltage,
				IFNULL(ROUND(AVG(dv.PhaseCVoltage), 2), 0.001) AS PhaseCVoltage,
				IFNULL(ROUND(AVG(dv.ABLineVoltage), 2), 0.001) AS ABLineVoltage,
				IFNULL(ROUND(AVG(dv.BCLineVoltage), 2), 0.001) AS BCLineVoltage,
				IFNULL(ROUND(AVG(dv.CALineVoltage), 2), 0.001) AS CALineVoltage,
				IFNULL(ROUND(AVG(dv.PhaseACurrent), 2), 0.001) AS PhaseACurrent,
				IFNULL(ROUND(AVG(dv.PhaseBCurrent), 2), 0.001) AS PhaseBCurrent,
				IFNULL(ROUND(AVG(dv.PhaseCCurrent), 2), 0.001) AS PhaseCCurrent,
				IFNULL(ROUND(AVG(dv.PhaseAActivePower), 2), 0.001) AS PhaseAActivePower,
				IFNULL(ROUND(AVG(dv.PhaseBActivePower), 2), 0.001) AS PhaseBActivePower,
				IFNULL(ROUND(AVG(dv.PhaseCActivePower), 2), 0.001) AS PhaseCActivePower,
				IFNULL(ROUND(AVG(dv.TotalActivePower), 2), 0.001) AS TotalActivePower,
				IFNULL(ROUND(AVG(dv.TotalReactivePower), 2), 0.001) AS TotalReactivePower,
				IFNULL(ROUND(AVG(dv.TotalApparentPower), 2), 0.001) AS TotalApparentPower,
				IFNULL(ROUND(AVG(dv.TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
				IFNULL(ROUND(AVG(dv.GridFrequency), 2), 0.001) AS GridFrequency,
				IFNULL(ROUND(AVG(dv.TotalForwardActiveEnergy), 2), 0.001) AS TotalForwardActiveEnergy,
				IFNULL(ROUND(AVG(dv.TotalReverseActiveEnergy), 2), 0.001) AS TotalReverseActiveEnergy,
				IFNULL(ROUND(AVG(dv.TotalForwardReactiveEnergy), 2), 0.001) AS TotalForwardReactiveEnergy,
				IFNULL(ROUND(AVG(dv.TotalReverseReactiveEnergy), 2), 0.001) AS TotalReverseReactiveEnergy,
				IFNULL(ROUND(AVG(dv.PhaseAForwardActivePower), 2), 0.001) AS PhaseAForwardActivePower,
				IFNULL(ROUND(AVG(dv.PhaseBForwardActivePower), 2), 0.001) AS PhaseBForwardActivePower,
				IFNULL(ROUND(AVG(dv.PhaseCForwardActivePower), 2), 0.001) AS PhaseCForwardActivePower,
				IFNULL(ROUND(AVG(dv.PhaseAReverseActivePower), 2), 0.001) AS PhaseAReverseActivePower,
				IFNULL(ROUND(AVG(dv.PhaseBReverseActivePower), 2), 0.001) AS PhaseBReverseActivePower,
				IFNULL(ROUND(AVG(dv.PhaseCReverseActivePower), 2), 0.001) AS PhaseCReverseActivePower,
				IFNULL(ROUND(AVG(dv.PhaseAForwardReactivePower), 2), 0.001) AS PhaseAForwardReactivePower,
				IFNULL(ROUND(AVG(dv.PhaseBForwardReactivePower), 2), 0.001) AS PhaseBForwardReactivePower,
				IFNULL(ROUND(AVG(dv.PhaseCForwardReactivePower), 2), 0.001) AS PhaseCForwardReactivePower,
				IFNULL(ROUND(AVG(dv.PhaseAReverseReactivePower), 2), 0.001) AS PhaseAReverseReactivePower,
				IFNULL(ROUND(AVG(dv.PhaseBReverseReactivePower), 2), 0.001) AS PhaseBReverseReactivePower,
				IFNULL(ROUND(AVG(dv.PhaseCReverseReactivePower), 2), 0.001) AS PhaseCReverseReactivePower,
				IFNULL(ROUND(AVG(dv.FlatForwardActiveEnergy), 2), 0.001) AS FlatForwardActiveEnergy,
				IFNULL(ROUND(AVG(dv.PeakForwardActiveEnergy), 2), 0.001) AS PeakForwardActiveEnergy,
				IFNULL(ROUND(AVG(dv.ValleyForwardActiveEnergy), 2), 0.001) AS ValleyForwardActiveEnergy,
				IFNULL(ROUND(AVG(dv.FlatReverseActiveEnergy), 2), 0.001) AS FlatReverseActiveEnergy,
				IFNULL(ROUND(AVG(dv.PeakReverseActiveEnergy), 2), 0.001) AS PeakReverseActiveEnergy,
				IFNULL(ROUND(AVG(dv.ValleyReverseActiveEnergy), 2), 0.001) AS ValleyReverseActiveEnergy,
			</if>
			
			<if test="table_name == 'model_sev_sg110cx'">
				IFNULL(ROUND(AVG(dv.TotalYield), 2), 0.001) AS TotalYield,
				IFNULL(ROUND(AVG(dv.DailyYield), 2), 0.001) AS DailyYield,
				IFNULL(ROUND(AVG(dv.ArrayInsulationResistance), 2), 0.001) AS ArrayInsulationResistance,
				IFNULL(ROUND(AVG(dv.InteriorTemperature), 2), 0.001) AS InteriorTemperature,
				IFNULL(ROUND(AVG(dv.TotalDCPower), 2), 0.001) AS TotalDCPower,
				IFNULL(ROUND(AVG(dv.TotalApparentPower), 2), 0.001) AS TotalApparentPower,
				IFNULL(ROUND(AVG(dv.TotalActivePower), 2), 0.001) AS TotalActivePower,
				IFNULL(ROUND(AVG(dv.TotalReactivePower), 2), 0.001) AS TotalReactivePower,
				IFNULL(ROUND(AVG(dv.TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
				IFNULL(ROUND(AVG(dv.GridFrequency), 2), 0.001) AS GridFrequency,
				IFNULL(ROUND(AVG(dv.PhaseAVoltage), 2), 0.001) AS PhaseAVoltage,
				IFNULL(ROUND(AVG(dv.PhaseBVoltage), 2), 0.001) AS PhaseBVoltage,
				IFNULL(ROUND(AVG(dv.PhaseCVoltage), 2), 0.001) AS PhaseCVoltage,
				IFNULL(ROUND(AVG(dv.PhaseACurrent), 2), 0.001) AS PhaseACurrent,
				IFNULL(ROUND(AVG(dv.PhaseBCurrent), 2), 0.001) AS PhaseBCurrent,
				IFNULL(ROUND(AVG(dv.PhaseCCurrent), 2), 0.001) AS PhaseCCurrent,
				IFNULL(ROUND(AVG(dv.nvmActivePower), 2), 0.001) AS nvmActivePower,
				IFNULL(ROUND(AVG(dv.nvmActiveEnergy), 2), 0.001) AS nvmActiveEnergy,
				IFNULL(ROUND(AVG(dv.MeasuredProduction), 2), 0.001) AS MeasuredProduction,
			</if>
			
			<if test="table_name == 'model_wattsun_tracker'">
				IFNULL(ROUND(AVG(dv.MODE), 2), 0.001) AS MODE,
				IFNULL(ROUND(AVG(dv.ST_CLEAR_ACCUMULATOR), 2), 0.001) AS ST_CLEAR_ACCUMULATOR,
				IFNULL(ROUND(AVG(dv.ND_CLEAR_ACCUMULATOR), 2), 0.001) AS ND_CLEAR_ACCUMULATOR,
				IFNULL(ROUND(AVG(dv.TRACKER_ANGLE_SETPOINT), 2), 0.001) AS TRACKER_ANGLE_SETPOINT,
				IFNULL(ROUND(AVG(dv.TRACKER_ANGLE), 2), 0.001) AS TRACKER_ANGLE,
				IFNULL(ROUND(AVG(dv.NIGHT_STOW_POSITION), 2), 0.001) AS NIGHT_STOW_POSITION,
				IFNULL(ROUND(AVG(dv.WIND_STOW_POSITION), 2), 0.001) AS WIND_STOW_POSITION,
			</if>
			
			<if test="table_name == 'model_wattsun_tcu'">
				IFNULL(ROUND(AVG(dv.TRACKER_ADDRESS), 2), 0.001) AS TRACKER_ADDRESS,
				IFNULL(ROUND(AVG(dv.HOUR), 2), 0.001) AS HOUR,
				IFNULL(ROUND(AVG(dv.MINUTE), 2), 0.001) AS MINUTE,
				IFNULL(ROUND(AVG(dv.DAY), 2), 0.001) AS DAY,
				IFNULL(ROUND(AVG(dv.DIGITAL_INPUTS), 2), 0.001) AS DIGITAL_INPUTS,
				IFNULL(ROUND(AVG(dv.DIGITAL_OUTPUTS), 2), 0.001) AS DIGITAL_OUTPUTS,
				IFNULL(ROUND(AVG(dv.WATCHDOG_COUNTER), 2), 0.001) AS WATCHDOG_COUNTER,
				IFNULL(ROUND(AVG(dv.ANGLE_CALC), 2), 0.001) AS ANGLE_CALC,
				IFNULL(ROUND(AVG(dv.LATITUDE), 2), 0.001) AS LATITUDE,
				IFNULL(ROUND(AVG(dv.LONGITUDE), 2), 0.001) AS LONGITUDE,
			</if>
			
			<if test="table_name == 'model_xantrex_gt500e'">
				IFNULL(ROUND(AVG(dv.AC_CURRENT_A), 2), 0.001) AS AC_CURRENT_A,
				IFNULL(ROUND(AVG(dv.AC_CURRENT_B), 2), 0.001) AS AC_CURRENT_B,
				IFNULL(ROUND(AVG(dv.AC_CURRENT_C), 2), 0.001) AS AC_CURRENT_C,
				IFNULL(ROUND(AVG(dv.AC_POWER), 2), 0.001) AS AC_POWER,
				IFNULL(ROUND(AVG(dv.AC_VOLTAGE_AB), 2), 0.001) AS AC_VOLTAGE_AB,
				IFNULL(ROUND(AVG(dv.AC_VOLTAGE_BC), 2), 0.001) AS AC_VOLTAGE_BC,
				IFNULL(ROUND(AVG(dv.AC_VOLTAGE_CA), 2), 0.001) AS AC_VOLTAGE_CA,
				IFNULL(ROUND(AVG(dv.DC_CURRENT), 2), 0.001) AS DC_CURRENT,
				IFNULL(ROUND(AVG(dv.DC_POWER), 2), 0.001) AS DC_POWER,
				IFNULL(ROUND(AVG(dv.DC_VOLTAGE), 2), 0.001) AS DC_VOLTAGE,
				IFNULL(ROUND(AVG(dv.ENERGY_DELIVERED), 2), 0.001) AS ENERGY_DELIVERED,
				IFNULL(ROUND(AVG(dv.FREQUENCY), 2), 0.001) AS FREQUENCY,
				IFNULL(ROUND(AVG(dv.STATUS_FAULT), 2), 0.001) AS STATUS_FAULT,
				IFNULL(ROUND(AVG(dv.STATUS_GOAL), 2), 0.001) AS STATUS_GOAL,
				IFNULL(ROUND(AVG(dv.STATUS_INVERTER), 2), 0.001) AS STATUS_INVERTER,
				IFNULL(ROUND(AVG(dv.STATUS_OPERATING), 2), 0.001) AS STATUS_OPERATING,
				IFNULL(ROUND(AVG(dv.STATUS_PV), 2), 0.001) AS STATUS_PV,
				IFNULL(ROUND(AVG(dv.T_LEFT_MATRIX), 2), 0.001) AS T_LEFT_MATRIX,
				IFNULL(ROUND(AVG(dv.T_RIGHT_MATRIX), 2), 0.001) AS T_RIGHT_MATRIX,
				
				
			</if>
			
			<if test="table_name == 'model_power_measurement_ion_7650'">
				IFNULL(ROUND(AVG(dv.Ia), 2), 0.001) AS Ia,
				IFNULL(ROUND(AVG(dv.Ib), 2), 0.001) AS Ib,
				IFNULL(ROUND(AVG(dv.Ic), 2), 0.001) AS Ic,
				IFNULL(ROUND(AVG(dv.I4), 2), 0.001) AS I4,
				IFNULL(ROUND(AVG(dv.I5), 2), 0.001) AS I5,
				IFNULL(ROUND(AVG(dv.IAvg), 2), 0.001) AS IAvg,
				IFNULL(ROUND(AVG(dv.IAvgMn), 2), 0.001) AS IAvgMn,
				IFNULL(ROUND(AVG(dv.IAvgMx), 2), 0.001) AS IAvgMx,
				IFNULL(ROUND(AVG(dv.IAvgMean), 2), 0.001) AS IAvgMean,
				IFNULL(ROUND(AVG(dv.Freq), 2), 0.001) AS Freq,
				IFNULL(ROUND(AVG(dv.FreqMn), 2), 0.001) AS FreqMn,
				IFNULL(ROUND(AVG(dv.FreqMx), 2), 0.001) AS FreqMx,
				IFNULL(ROUND(AVG(dv.FreqMean), 2), 0.001) AS FreqMean,
				IFNULL(ROUND(AVG(dv.VUnbal), 2), 0.001) AS VUnbal,
				IFNULL(ROUND(AVG(dv.IUnbal), 2), 0.001) AS IUnbal,
				IFNULL(ROUND(AVG(dv.PhaseRev), 2), 0.001) AS PhaseRev,
				IFNULL(ROUND(AVG(dv.VInA), 2), 0.001) AS VInA,
				IFNULL(ROUND(AVG(dv.VInB), 2), 0.001) AS VInB,
				IFNULL(ROUND(AVG(dv.VInC), 2), 0.001) AS VInC,
				IFNULL(ROUND(AVG(dv.VInAvg), 2), 0.001) AS VInAvg,
				IFNULL(ROUND(AVG(dv.VInAvgMx), 2), 0.001) AS VInAvgMx,
				IFNULL(ROUND(AVG(dv.VIIAb), 2), 0.001) AS VIIAb,
				IFNULL(ROUND(AVG(dv.VIIBc), 2), 0.001) AS VIIBc,
				IFNULL(ROUND(AVG(dv.VIICa), 2), 0.001) AS VIICa,
				IFNULL(ROUND(AVG(dv.VIIAvg), 2), 0.001) AS VIIAvg,
				IFNULL(ROUND(AVG(dv.VIIAvgMx), 2), 0.001) AS VIIAvgMx,
				IFNULL(ROUND(AVG(dv.VIIAvgMean), 2), 0.001) AS VIIAvgMean,
				IFNULL(ROUND(AVG(dv.kWA), 2), 0.001) AS kWA,
				IFNULL(ROUND(AVG(dv.kWB), 2), 0.001) AS kWB,
				IFNULL(ROUND(AVG(dv.kWC), 2), 0.001) AS kWC,
				IFNULL(ROUND(AVG(dv.kWTot), 2), 0.001) AS kWTot,
				IFNULL(ROUND(AVG(dv.kWTotMax), 2), 0.001) AS kWTotMax,
				IFNULL(ROUND(AVG(dv.kVARA), 2), 0.001) AS kVARA,
				IFNULL(ROUND(AVG(dv.kVARB), 2), 0.001) AS kVARB,
				IFNULL(ROUND(AVG(dv.kVARC), 2), 0.001) AS kVARC,
				IFNULL(ROUND(AVG(dv.kVARTot), 2), 0.001) AS kVARTot,
				IFNULL(ROUND(AVG(dv.kVARTotMax), 2), 0.001) AS kVARTotMax,
				IFNULL(ROUND(AVG(dv.kVAA), 2), 0.001) AS kVAA,
				IFNULL(ROUND(AVG(dv.kVAB), 2), 0.001) AS kVAB,
				IFNULL(ROUND(AVG(dv.kVAC), 2), 0.001) AS kVAC,
				IFNULL(ROUND(AVG(dv.kVATot), 2), 0.001) AS kVATot,
				IFNULL(ROUND(AVG(dv.kVATotMax), 2), 0.001) AS kVATotMax,
				IFNULL(ROUND(AVG(dv.kWhDel), 2), 0.001) AS kWhDel,
				IFNULL(ROUND(AVG(dv.kWhRec), 2), 0.001) AS kWhRec,
				IFNULL(ROUND(AVG(dv.kVARhDel), 2), 0.001) AS kVARhDel,
				IFNULL(ROUND(AVG(dv.kVARhRec), 2), 0.001) AS kVARhRec,
				IFNULL(ROUND(AVG(dv.kVARhDelRec), 2), 0.001) AS kVARhDelRec,
				
				IFNULL(ROUND(AVG(dv.PFSignA), 2), 0.001) AS PFSignA,
				IFNULL(ROUND(AVG(dv.PFSignB), 2), 0.001) AS PFSignB,
				IFNULL(ROUND(AVG(dv.PFSignC), 2), 0.001) AS PFSignC,
				IFNULL(ROUND(AVG(dv.PFSignTot), 2), 0.001) AS PFSignTot,
				IFNULL(ROUND(AVG(dv.V1THDMx), 2), 0.001) AS V1THDMx,
				IFNULL(ROUND(AVG(dv.V2THDMx), 2), 0.001) AS V2THDMx,
				IFNULL(ROUND(AVG(dv.V3THDMx), 2), 0.001) AS V3THDMx,
				IFNULL(ROUND(AVG(dv.I1THDMx), 2), 0.001) AS I1THDMx,
				IFNULL(ROUND(AVG(dv.I2THDMx), 2), 0.001) AS I2THDMx,
				IFNULL(ROUND(AVG(dv.I3THDMx), 2), 0.001) AS I3THDMx,
				IFNULL(ROUND(AVG(dv.I1KFactor), 2), 0.001) AS I1KFactor,
				IFNULL(ROUND(AVG(dv.I2KFactor), 2), 0.001) AS I2KFactor,
				IFNULL(ROUND(AVG(dv.I3KFactor), 2), 0.001) AS I3KFactor,
				IFNULL(ROUND(AVG(dv.I1CrestFactor), 2), 0.001) AS I1CrestFactor,
				IFNULL(ROUND(AVG(dv.I2CrestFactor), 2), 0.001) AS I2CrestFactor,
				IFNULL(ROUND(AVG(dv.I3CrestFactor), 2), 0.001) AS I3CrestFactor,
				
				
			</if>
			
			<if test="table_name == 'model_pyranometer_poa'">
				IFNULL(ROUND(AVG(dv.poa), 2), 0.001) AS poa,
				IFNULL(ROUND(SUM(dv.point1), 2), 0.001) AS point1,
				IFNULL(ROUND(AVG(dv.point2), 2), 0.001) AS point2,
				IFNULL(ROUND(AVG(dv.point3), 2), 0.001) AS point3,
			</if>
			
			
			
			<if test="table_name == 'model_virtual_meter_or_inverter'">
				IFNULL(ROUND(AVG(dv.nvmActivePower), 2), 0.001) AS nvmActivePower,
				IFNULL(ROUND(SUM(dv.nvmActiveEnergy), 2), 0.001) AS nvmActiveEnergy,
				IFNULL(ROUND(AVG(dv.nvm_temperature), 2), 0.001) AS nvm_temperature,
				IFNULL(ROUND(AVG(dv.nvm_irradiance), 2), 0.001) AS nvm_irradiance,
				IFNULL(ROUND(AVG(dv.expected_power_ac), 2), 0.001) AS expected_power_ac,
				
				
			</if>
			
			
			<if test="table_name == 'model_meter_ion_8600'">
				IFNULL(ROUND(AVG(dv.VlnA), 2), 0.001) AS VlnA,
				IFNULL(ROUND(AVG(dv.VlnB), 2), 0.001) AS VlnB,
				IFNULL(ROUND(AVG(dv.VlnC), 2), 0.001) AS VlnC,
				IFNULL(ROUND(AVG(dv.VlnAve), 2), 0.001) AS VlnAve,
				IFNULL(ROUND(AVG(dv.VllAb), 2), 0.001) AS VllAb,
				IFNULL(ROUND(AVG(dv.VllAc), 2), 0.001) AS VllAc,
				IFNULL(ROUND(AVG(dv.VllCa), 2), 0.001) AS VllCa,
				IFNULL(ROUND(AVG(dv.IA), 2), 0.001) AS IA,
				IFNULL(ROUND(AVG(dv.IB), 2), 0.001) AS IB,
				IFNULL(ROUND(AVG(dv.IC), 2), 0.001) AS IC,
				IFNULL(ROUND(AVG(dv.IAve), 2), 0.001) AS IAve,
				
				IFNULL(ROUND(AVG(dv.VUnbal), 2), 0.001) AS VUnbal,
				IFNULL(ROUND(AVG(dv.IUnbal), 2), 0.001) AS IUnbal,
				IFNULL(ROUND(AVG(dv.Freq), 2), 0.001) AS Freq,
				IFNULL(ROUND(AVG(dv.I4), 2), 0.001) AS I4,
				IFNULL(ROUND(AVG(dv.kWA), 2), 0.001) AS kWA,
				IFNULL(ROUND(AVG(dv.kWB), 2), 0.001) AS kWB,
				IFNULL(ROUND(AVG(dv.kWC), 2), 0.001) AS kWC,
				IFNULL(ROUND(AVG(dv.kWTot), 2), 0.001) AS kWTot,
				IFNULL(ROUND(AVG(dv.kVARA), 2), 0.001) AS kVARA,
				IFNULL(ROUND(AVG(dv.kVARB), 2), 0.001) AS kVARB,
				
				IFNULL(ROUND(AVG(dv.kVARC), 2), 0.001) AS kVARC,
				IFNULL(ROUND(AVG(dv.kVARTot), 2), 0.001) AS kVARTot,
				IFNULL(ROUND(AVG(dv.KVAA), 2), 0.001) AS KVAA,
				IFNULL(ROUND(AVG(dv.KVAB), 2), 0.001) AS KVAB,
				IFNULL(ROUND(AVG(dv.KVAC), 2), 0.001) AS KVAC,
				IFNULL(ROUND(AVG(dv.KVATot), 2), 0.001) AS KVATot,
				IFNULL(ROUND(AVG(dv.PFSignA), 2), 0.001) AS PFSignA,
				IFNULL(ROUND(AVG(dv.PFSignB), 2), 0.001) AS PFSignB,
				IFNULL(ROUND(AVG(dv.PFSignC), 2), 0.001) AS PFSignC,
				IFNULL(ROUND(AVG(dv.PFSignTot), 2), 0.001) AS PFSignTot,
				
				IFNULL(ROUND(AVG(dv.VIIAveMx), 2), 0.001) AS VIIAveMx,
				IFNULL(ROUND(AVG(dv.IAveMx), 2), 0.001) AS IAveMx,
				IFNULL(ROUND(AVG(dv.kWTotMx), 2), 0.001) AS kWTotMx,
				IFNULL(ROUND(AVG(dv.kVARTotMx), 2), 0.001) AS kVARTotMx,
				IFNULL(ROUND(AVG(dv.kVATotMx), 2), 0.001) AS kVATotMx,
				IFNULL(ROUND(AVG(dv.FreqMx), 2), 0.001) AS FreqMx,
				IFNULL(ROUND(AVG(dv.VIIAveMn), 2), 0.001) AS VIIAveMn,
				IFNULL(ROUND(AVG(dv.IAveMn), 2), 0.001) AS IAveMn,
				IFNULL(ROUND(AVG(dv.FreqMn), 2), 0.001) AS FreqMn,
				IFNULL(ROUND(AVG(dv.kWSdDelRec), 2), 0.001) AS kWSdDelRec,
				
				IFNULL(ROUND(AVG(dv.kVASdDelRec), 2), 0.001) AS kVASdDelRec,
				IFNULL(ROUND(AVG(dv.kVARSdDelRec), 2), 0.001) AS kVARSdDelRec,
				IFNULL(ROUND(AVG(dv.kWSdMxDR), 2), 0.001) AS kWSdMxDR,
				IFNULL(ROUND(AVG(dv.kVASdMxDR), 2), 0.001) AS kVASdMxDR,
				IFNULL(ROUND(AVG(dv.kVARSdMxDR), 2), 0.001) AS kVARSdMxDR,
				IFNULL(ROUND(AVG(dv.PhaseRev), 2), 0.001) AS PhaseRev,
				IFNULL(ROUND(AVG(dv.kWhDel), 2), 0.001) AS kWhDel,
				IFNULL(ROUND(AVG(dv.kWhRec), 2), 0.001) AS kWhRec,
				IFNULL(ROUND(AVG(dv.kWhDelRec), 2), 0.001) AS kWhDelRec,
				IFNULL(ROUND(AVG(dv.kWhDel_Rec), 2), 0.001) AS kWhDel_Rec,
				IFNULL(ROUND(AVG(dv.kVARhDel), 2), 0.001) AS kVARhDel,
				IFNULL(ROUND(AVG(dv.kVARhRec), 2), 0.001) AS kVARhRec,
				IFNULL(ROUND(AVG(dv.kVARhDelRec), 2), 0.001) AS kVARhDelRec,
				IFNULL(ROUND(AVG(dv.kVARhDel_Rec), 2), 0.001) AS kVARhDel_Rec,
				IFNULL(ROUND(AVG(dv.kVAhDelRec), 2), 0.001) AS kVAhDelRec,
				IFNULL(ROUND(AVG(dv.V1THDMx), 2), 0.001) AS V1THDMx,
				IFNULL(ROUND(AVG(dv.V2THDMx), 2), 0.001) AS V2THDMx,
				IFNULL(ROUND(AVG(dv.V3THDMx), 2), 0.001) AS  V3THDMx,
				IFNULL(ROUND(AVG(dv.I1THDMx), 2), 0.001) AS I1THDMx,
			</if>
			
			
			<if test="table_name == 'model_aes_tx_inverter'">
				IFNULL(ROUND(AVG(dv.pt0), 2), 0.001) AS pt0,
				IFNULL(ROUND(AVG(dv.pt1), 2), 0.001) AS pt1,
				IFNULL(ROUND(AVG(dv.pt2), 2), 0.001) AS pt2,
				IFNULL(ROUND(AVG(dv.pt3), 2), 0.001) AS pt3,
				IFNULL(ROUND(AVG(dv.pt4), 2), 0.001) AS pt4,
				IFNULL(ROUND(AVG(dv.pt5), 2), 0.001) AS pt5,
				IFNULL(ROUND(AVG(dv.pt6), 2), 0.001) AS pt6,
				IFNULL(ROUND(AVG(dv.pt7), 2), 0.001) AS pt7,
				IFNULL(ROUND(AVG(dv.pt8), 2), 0.001) AS pt8,
				IFNULL(ROUND(AVG(dv.pt9), 2), 0.001) AS pt9,
				IFNULL(ROUND(AVG(dv.pt10), 2), 0.001) AS pt10,
				
				IFNULL(ROUND(AVG(dv.pt11), 2), 0.001) AS pt11,
				IFNULL(ROUND(AVG(dv.pt12), 2), 0.001) AS pt12,
				IFNULL(ROUND(AVG(dv.pt13), 2), 0.001) AS pt13,
				IFNULL(ROUND(AVG(dv.pt14), 2), 0.001) AS pt14,
				IFNULL(ROUND(AVG(dv.pt15), 2), 0.001) AS pt15,
				IFNULL(ROUND(AVG(dv.pt16), 2), 0.001) AS pt16,
				IFNULL(ROUND(AVG(dv.pt17), 2), 0.001) AS pt17,
				IFNULL(ROUND(AVG(dv.pt18), 2), 0.001) AS pt18,
				IFNULL(ROUND(AVG(dv.pt19), 2), 0.001) AS pt19,
				IFNULL(ROUND(AVG(dv.pt20), 2), 0.001) AS pt20,
				
				IFNULL(ROUND(AVG(dv.pt21), 2), 0.001) AS pt21,
				IFNULL(ROUND(AVG(dv.pt22), 2), 0.001) AS pt22,
				IFNULL(ROUND(AVG(dv.pt23), 2), 0.001) AS pt23,
				IFNULL(ROUND(AVG(dv.pt24), 2), 0.001) AS pt24,
				IFNULL(ROUND(AVG(dv.pt25), 2), 0.001) AS pt25,
				IFNULL(ROUND(AVG(dv.pt26), 2), 0.001) AS pt26,
				IFNULL(ROUND(AVG(dv.pt27), 2), 0.001) AS pt27,
				IFNULL(ROUND(AVG(dv.pt28), 2), 0.001) AS pt28,
				IFNULL(ROUND(AVG(dv.pt29), 2), 0.001) AS pt29,
				IFNULL(ROUND(AVG(dv.pt30), 2), 0.001) AS pt30,
				
				IFNULL(ROUND(AVG(dv.pt31), 2), 0.001) AS pt31,
				IFNULL(ROUND(AVG(dv.pt32), 2), 0.001) AS pt32,
				IFNULL(ROUND(AVG(dv.pt33), 2), 0.001) AS pt33,
				IFNULL(ROUND(AVG(dv.pt34), 2), 0.001) AS pt34,
				IFNULL(ROUND(AVG(dv.pt35), 2), 0.001) AS pt35,
				IFNULL(ROUND(AVG(dv.pt36), 2), 0.001) AS pt36,
				IFNULL(ROUND(AVG(dv.pt37), 2), 0.001) AS pt37,
				IFNULL(ROUND(AVG(dv.pt38), 2), 0.001) AS pt38,
				IFNULL(ROUND(AVG(dv.pt39), 2), 0.001) AS pt39,
				IFNULL(ROUND(AVG(dv.pt40), 2), 0.001) AS pt40,
				
				IFNULL(ROUND(AVG(dv.pt41), 2), 0.001) AS pt41,
				IFNULL(ROUND(AVG(dv.pt42), 2), 0.001) AS pt42,
				IFNULL(ROUND(AVG(dv.pt43), 2), 0.001) AS pt43,
				IFNULL(ROUND(AVG(dv.pt44), 2), 0.001) AS pt44,
				IFNULL(ROUND(AVG(dv.pt45), 2), 0.001) AS pt45,
			</if>
			
			<if test="table_name == 'model_sma_inverter_stp62us41'">
				IFNULL(ROUND(AVG(dv.VA_phsA), 2), 0.001) AS VA_phsA,
				IFNULL(ROUND(AVG(dv.VA_phsB), 2), 0.001) AS VA_phsB,
				IFNULL(ROUND(AVG(dv.DcMs_Vol0), 2), 0.001) AS DcMs_Vol0,
				IFNULL(ROUND(AVG(dv.DcMs_Vol1), 2), 0.001) AS DcMs_Vol1,
				IFNULL(ROUND(AVG(dv.DcMs_Vol2), 2), 0.001) AS DcMs_Vol2,
				IFNULL(ROUND(AVG(dv.DcMs_Vol3), 2), 0.001) AS DcMs_Vol3,
				IFNULL(ROUND(AVG(dv.DcMs_Vol4), 2), 0.001) AS DcMs_Vol4,
				IFNULL(ROUND(AVG(dv.DcMs_Vol5), 2), 0.001) AS DcMs_Vol5,
				IFNULL(ROUND(AVG(dv.TotW_Pv), 2), 0.001) AS TotW_Pv,
				IFNULL(ROUND(AVG(dv.Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(dv.PhV_phsC), 2), 0.001) AS PhV_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(dv.W_phsB), 2), 0.001) AS W_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_TotW), 2), 0.001) AS GridMs_TotW,
				IFNULL(ROUND(AVG(dv.W_phsC), 2), 0.001) AS W_phsC,
				IFNULL(ROUND(AVG(dv.VAr_phsC), 2), 0.001) AS VAr_phsC,
				IFNULL(ROUND(AVG(dv.DcMs_Watt0), 2), 0.001) AS DcMs_Watt0,
				IFNULL(ROUND(AVG(dv.DcMs_Watt1), 2), 0.001) AS DcMs_Watt1,
				IFNULL(ROUND(AVG(dv.DcMs_Watt2), 2), 0.001) AS DcMs_Watt2,
				IFNULL(ROUND(AVG(dv.DcMs_Watt3), 2), 0.001) AS DcMs_Watt3,
				IFNULL(ROUND(AVG(dv.DcMs_Watt4), 2), 0.001) AS DcMs_Watt4,
				IFNULL(ROUND(AVG(dv.DcMs_Watt5), 2), 0.001) AS DcMs_Watt5,
				IFNULL(ROUND(AVG(dv.W_phsA), 2), 0.001) AS W_phsA,
				IFNULL(ROUND(AVG(dv.VAr_phsB), 2), 0.001) AS VAr_phsB,
				IFNULL(ROUND(AVG(dv.TotVAr_Pv), 2), 0.001) AS TotVAr_Pv,
				IFNULL(ROUND(AVG(dv.PhV_phsA2B), 2), 0.001) AS PhV_phsA2B,
				IFNULL(ROUND(AVG(dv.VAr_phsA), 2), 0.001) AS VAr_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_TotVA), 2), 0.001) AS GridMs_TotVA,
				IFNULL(ROUND(AVG(dv.GridMs_TotVAr), 2), 0.001) AS GridMs_TotVAr,
				IFNULL(ROUND(AVG(dv.DcMs_Amp0), 2), 0.001) AS DcMs_Amp0,
				IFNULL(ROUND(AVG(dv.DcMs_Amp1), 2), 0.001) AS DcMs_Amp1,
				IFNULL(ROUND(AVG(dv.DcMs_Amp2), 2), 0.001) AS DcMs_Amp2,
				IFNULL(ROUND(AVG(dv.DcMs_Amp3), 2), 0.001) AS DcMs_Amp3,
				IFNULL(ROUND(AVG(dv.DcMs_Amp4), 2), 0.001) AS DcMs_Amp4,
				IFNULL(ROUND(AVG(dv.DcMs_Amp5), 2), 0.001) AS DcMs_Amp5,
				IFNULL(ROUND(AVG(dv.PhV_phsB2C), 2), 0.001) AS PhV_phsB2C,
				IFNULL(ROUND(AVG(dv.PhV_phsB), 2), 0.001) AS PhV_phsB,
				IFNULL(ROUND(AVG(dv.A_phsA), 2), 0.001) AS A_phsA,
				
				IFNULL(ROUND(AVG(dv.PhV_phsC2A), 2), 0.001) AS PhV_phsC2A,
				IFNULL(ROUND(AVG(dv.A_phsB), 2), 0.001) AS A_phsB,
				IFNULL(ROUND(AVG(dv.PhV_phsA), 2), 0.001) AS PhV_phsA,
				IFNULL(ROUND(AVG(dv.VA_phsC), 2), 0.001) AS VA_phsC,
				IFNULL(ROUND(AVG(dv.A_phsC), 2), 0.001) AS A_phsC,
				IFNULL(ROUND(AVG(dv.Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(dv.Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(dv.TotWhOut_Pv), 2), 0.001) AS TotWhOut_Pv,
				IFNULL(ROUND(AVG(dv.Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(dv.Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				
			</if>
			
			
			<if test="table_name == 'model_sma_inverter_stp30000tlus10'">
				IFNULL(ROUND(AVG(dv.GridMs_TotVAr), 2), 0.001) AS GridMs_TotVAr,
				IFNULL(ROUND(AVG(dv.DcMs_Watt0), 2), 0.001) AS DcMs_Watt0,
				IFNULL(ROUND(AVG(dv.DcMs_Watt1), 2), 0.001) AS DcMs_Watt1,
				IFNULL(ROUND(AVG(dv.W_phsA), 2), 0.001) AS W_phsA,
				IFNULL(ROUND(AVG(dv.W_phsB), 2), 0.001) AS W_phsB,
				IFNULL(ROUND(AVG(dv.W_phsC), 2), 0.001) AS W_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_TotW), 2), 0.001) AS GridMs_TotW,
				IFNULL(ROUND(AVG(dv.GridMs_TotVA), 2), 0.001) AS GridMs_TotVA,
				IFNULL(ROUND(AVG(dv.A_phsA), 2), 0.001) AS A_phsA,
				IFNULL(ROUND(AVG(dv.A_phsB), 2), 0.001) AS A_phsB,
				IFNULL(ROUND(AVG(dv.A_phsC), 2), 0.001) AS A_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(dv.Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(dv.DcMs_Vol0), 2), 0.001) AS DcMs_Vol0,
				IFNULL(ROUND(AVG(dv.DcMs_Vol1), 2), 0.001) AS DcMs_Vol1,
				IFNULL(ROUND(AVG(dv.PhV_phsA), 2), 0.001) AS PhV_phsA,
				IFNULL(ROUND(AVG(dv.PhV_phsB), 2), 0.001) AS PhV_phsB,
				IFNULL(ROUND(AVG(dv.PhV_phsC), 2), 0.001) AS PhV_phsC,
				IFNULL(ROUND(AVG(dv.DcMs_Amp0), 2), 0.001) AS DcMs_Amp0,
				IFNULL(ROUND(AVG(dv.DcMs_Amp1), 2), 0.001) AS DcMs_Amp1,
				
				IFNULL(ROUND(AVG(dv.TotVAr_Pv), 2), 0.001) AS TotVAr_Pv,
				IFNULL(ROUND(AVG(dv. VAr_phsA), 2), 0.001) AS VAr_phsA,
				IFNULL(ROUND(AVG(dv.VAr_phsB), 2), 0.001) AS VAr_phsB,
				IFNULL(ROUND(AVG(dv.VAr_phsC), 2), 0.001) AS VAr_phsC,
				IFNULL(ROUND(AVG(dv.VA_phsA), 2), 0.001) AS VA_phsA,
				IFNULL(ROUND(AVG(dv.VA_phsB), 2), 0.001) AS VA_phsB,
				IFNULL(ROUND(AVG(dv.VA_phsC), 2), 0.001) AS VA_phsC,
				IFNULL(ROUND(AVG(dv.TotW_Pv), 2), 0.001) AS TotW_Pv,
				
				
				IFNULL(ROUND(AVG(dv.Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(dv.Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(dv.Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(dv. Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(dv.TotWhOut_Pv), 2), 0.001) AS TotWhOut_Pv,
				
			</if>
			
			
			<if test="table_name == 'model_campell_scientific_meter1'">
				
				IFNULL(ROUND(IF(AVG(dv.Meter1_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter1_ACPower)), 2), 0.001) AS Meter1_ACPower,
				
				IFNULL(ROUND(AVG(dv.Total_Energy), 2), 0.001) AS Total_Energy,
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter2'">
				IFNULL(ROUND(IF(AVG(dv.Meter2_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter2_ACPower)), 2), 0.001) AS Meter2_ACPower,
				
				IFNULL(ROUND(AVG(dv.Total_Energy), 2), 0.001) AS Total_Energy,
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter3'">
				IFNULL(ROUND(IF(AVG(dv.Meter3_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter3_ACPower)), 2), 0.001) AS Meter3_ACPower,
				IFNULL(ROUND(AVG(dv.Total_Energy), 2), 0.001) AS Total_Energy,
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter4'">
				IFNULL(ROUND(IF(AVG(dv.Meter4_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter4_ACPower)), 2), 0.001) AS Meter4_ACPower,
				IFNULL(ROUND(AVG(dv.Total_Energy), 2), 0.001) AS Total_Energy,
			</if>
			
			
			<if test="table_name == 'model_adam4017ws_class8110_nelis190'">
				IFNULL(ROUND(AVG(dv.AmbientTemp), 2), 0.001) AS AmbientTemp,
				IFNULL(ROUND(AVG(dv.PVPanelTemp), 2), 0.001) AS PVPanelTemp,
				IFNULL(ROUND(AVG(dv.PVPanelTemp1), 2), 0.001) AS PVPanelTemp1,
				IFNULL(ROUND(AVG(dv.WindSpeed), 2), 0.001) AS WindSpeed,
				
				IFNULL(ROUND(IF(AVG(dv.POACMP11) <![CDATA[<]]> 0, 0, AVG(dv.POACMP11)), 2), 0.001) AS POACMP11,
				
				IFNULL(ROUND(IF(AVG(dv.IrradiancePOA) <![CDATA[<]]> 0, 0, AVG(dv.IrradiancePOA)), 2), 0.001) AS IrradiancePOA,
				IFNULL(ROUND(AVG(dv.IMTInternalTemp), 2), 0.001) AS IMTInternalTemp,
				IFNULL(ROUND(AVG(dv.PVPanelTemp2), 2), 0.001) AS PVPanelTemp2,
				IFNULL(ROUND(AVG(dv.code_ch0), 2), 0.001) AS code_ch0,
				IFNULL(ROUND(AVG(dv.code_ch1), 2), 0.001) AS code_ch1,
				IFNULL(ROUND(AVG(dv.code_ch2), 2), 0.001) AS code_ch2,
				IFNULL(ROUND(AVG(dv.code_ch3), 2), 0.001) AS code_ch3,
				IFNULL(ROUND(AVG(dv.code_ch4), 2), 0.001) AS code_ch4,
				IFNULL(ROUND(AVG(dv.code_ch5), 2), 0.001) AS code_ch5,
				IFNULL(ROUND(AVG(dv.code_ch6), 2), 0.001) AS code_ch6,
				IFNULL(ROUND(AVG(dv.code_ch7), 2), 0.001) AS code_ch7,
			</if>
			
			<if test="table_name == 'model_sma_inverter_stp1200tlus10'">
				IFNULL(ROUND(AVG(dv.Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(dv.Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(dv.Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(dv.Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(dv.Metering_GridMs_TotWhOut), 2), 0.001) AS Metering_GridMs_TotWhOut,
				
				IFNULL(ROUND(IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(dv.GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(dv.Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(dv.Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(dv.DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(dv.DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(dv.DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(dv.DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(dv.DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(dv.DcMs_WattB), 2), 0.001) AS DcMs_WattB,
			</if>
			
			<if test="table_name == 'model_satcon_powergate_225_inverter'">
				IFNULL(ROUND(AVG(dv.Fault1), 2), 0.001) AS Fault1,
				IFNULL(ROUND(AVG(dv.Fault2), 2), 0.001) AS Fault2,
				IFNULL(ROUND(AVG(dv.Fault3), 2), 0.001) AS Fault3,
				IFNULL(ROUND(AVG(dv.Fault4), 2), 0.001) AS Fault4,
				IFNULL(ROUND(AVG(dv.GridStatus), 2), 0.001) AS GridStatus,
				IFNULL(ROUND(AVG(dv.Status6), 2), 0.001) AS Status6,
				IFNULL(ROUND(AVG(dv.Status7), 2), 0.001) AS Status7,
				IFNULL(ROUND(AVG(dv.PCSState), 2), 0.001) AS PCSState,
				IFNULL(ROUND(AVG(dv.DCInputPower), 2), 0.001) AS DCInputPower,
				IFNULL(ROUND(AVG(dv.DC_Link_Volts), 2), 0.001) AS DC_Link_Volts,
				IFNULL(ROUND(AVG(dv.DCInputVoltage), 2), 0.001) AS DCInputVoltage,
				IFNULL(ROUND(AVG(dv.DCInputCurrent), 2), 0.001) AS DCInputCurrent,
				IFNULL(ROUND(AVG(dv.OutputKVAR), 2), 0.001) AS OutputKVAR,
				IFNULL(ROUND(AVG(dv.OutputKW), 2), 0.001) AS OutputKW,
				IFNULL(ROUND(AVG(dv.OutputKVA), 2), 0.001) AS OutputKVA,
				IFNULL(ROUND(AVG(dv.Line_Volts_A_TEST), 2), 0.001) AS Line_Volts_A_TEST,
				IFNULL(ROUND(AVG(dv.Line_Volts_B_TEST), 2), 0.001) AS Line_Volts_B_TEST,
				IFNULL(ROUND(AVG(dv.Line_Volts_C_TEST), 2), 0.001) AS Line_Volts_C_TEST,
				IFNULL(ROUND(AVG(dv.Line_Amps_A_TEST), 2), 0.001) AS Line_Amps_A_TEST,
				IFNULL(ROUND(AVG(dv.Line_Amps_B_TEST), 2), 0.001) AS Line_Amps_B_TEST,
				
				IFNULL(ROUND(AVG(dv.Line_Amps_C_TEST), 2), 0.001) AS Line_Amps_C_TEST,
				IFNULL(ROUND(AVG(dv. NeutralCurrent), 2), 0.001) AS NeutralCurrent,
				IFNULL(ROUND(AVG(dv.StopCode), 2), 0.001) AS StopCode,
				IFNULL(ROUND(AVG(dv.KWHlow), 2), 0.001) AS KWHlow,
				IFNULL(ROUND(AVG(dv.KWH), 2), 0.001) AS KWH,
				IFNULL(ROUND(AVG(dv.PowerFactor), 2), 0.001) AS PowerFactor,
				IFNULL(ROUND(AVG(dv.LineFreq), 2), 0.001) AS LineFreq,
				IFNULL(ROUND(AVG(dv.OutputPowerLimit), 2), 0.001) AS OutputPowerLimit,
			</if>
			
			
			<if test="table_name == 'model_sma_inverter_stp24ktlus10'">
				IFNULL(ROUND(AVG(dv.Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(dv.Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(dv.Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(dv.Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(dv.Metering_GridMs_TotWhOut), 2), 0.001) AS Metering_GridMs_TotWhOut,
				
				IFNULL(ROUND(IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(dv.GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(dv.Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(dv.Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(dv.DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(dv.DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(dv.DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(dv.DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(dv.DcMs_AmpA1), 2), 0.001) AS DcMs_AmpA1,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(dv.DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(dv.DcMs_WattB), 2), 0.001) AS DcMs_WattB,
			</if>
			
			<if test="table_name == 'model_sma_cluster_controller'">
				IFNULL(ROUND(AVG(dv.Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(dv.Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(dv.Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(dv.Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				
				IFNULL(ROUND(IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(dv.GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(dv.Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(dv.Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(dv.DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(dv.DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(dv.DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(dv.DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(dv.GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(dv.DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(dv.DcMs_WattB), 2), 0.001) AS DcMs_WattB,
				IFNULL(ROUND(AVG(dv.InOut_AnInA1), 2), 0.001) AS InOut_AnInA1,
				IFNULL(ROUND(AVG(dv.InOut_AnInA2), 2), 0.001) AS InOut_AnInA2,
				IFNULL(ROUND(AVG(dv.InOut_AnInA3), 2), 0.001) AS InOut_AnInA3,
				IFNULL(ROUND(AVG(dv.InOut_AnInVol4), 2), 0.001) AS InOut_AnInVol4,
				IFNULL(ROUND(AVG(dv.Env_ExInsol), 2), 0.001) AS Env_ExInsol,
			</if>
			
			<if test="table_name == 'model_solaredge_inverter'">
				IFNULL(ROUND(AVG(dv.C_DeviceAddress), 2), 0.001) AS C_DeviceAddress,
				IFNULL(ROUND(AVG(dv.C_SunSpec_DID), 2), 0.001) AS C_SunSpec_DID,
				IFNULL(ROUND(AVG(dv.C_SunSpec_Length), 2), 0.001) AS C_SunSpec_Length,
				IFNULL(ROUND(AVG(dv.I_AC_Current), 2), 0.001) AS I_AC_Current,
				IFNULL(ROUND(AVG(dv.I_AC_CurrentA), 2), 0.001) AS I_AC_CurrentA,
				IFNULL(ROUND(AVG(dv.I_AC_CurrentB), 2), 0.001) AS I_AC_CurrentB,
				IFNULL(ROUND(AVG(dv.I_AC_CurrentC), 2), 0.001) AS I_AC_CurrentC,
				IFNULL(ROUND(AVG(dv.I_AC_Current_SF), 2), 0.001) AS I_AC_Current_SF,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageAB), 2), 0.001) AS I_AC_VoltageAB,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageBC), 2), 0.001) AS I_AC_VoltageBC,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageCA), 2), 0.001) AS I_AC_VoltageCA,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageAN), 2), 0.001) AS I_AC_VoltageAN,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageBN), 2), 0.001) AS I_AC_VoltageBN,
				IFNULL(ROUND(AVG(dv.I_AC_VoltageCN), 2), 0.001) AS I_AC_VoltageCN,
				IFNULL(ROUND(AVG(dv.I_AC_Voltage_SF), 2), 0.001) AS I_AC_Voltage_SF,

				IFNULL(ROUND(IF(AVG(dv.I_AC_Power) <![CDATA[<]]> 0, 0, AVG(dv.I_AC_Power)), 2), 0.001) AS I_AC_Power,
				
				IFNULL(ROUND(AVG(dv.I_AC_Power_SF), 2), 0.001) AS I_AC_Power_SF,
				IFNULL(ROUND(AVG(dv.I_AC_Frequency), 2), 0.001) AS I_AC_Frequency,
				IFNULL(ROUND(AVG(dv.I_AC_Frequency_SF), 2), 0.001) AS I_AC_Frequency_SF,
				IFNULL(ROUND(AVG(dv.I_AC_VA), 2), 0.001) AS I_AC_VA,
				IFNULL(ROUND(AVG(dv.I_AC_VA_SF), 2), 0.001) AS I_AC_VA_SF,
				IFNULL(ROUND(AVG(dv.I_AC_VAR), 2), 0.001) AS I_AC_VAR,
				IFNULL(ROUND(AVG(dv.I_AC_VAR_SF), 2), 0.001) AS I_AC_VAR_SF,
				IFNULL(ROUND(AVG(dv.I_AC_PF), 2), 0.001) AS I_AC_PF,
				IFNULL(ROUND(AVG(dv.I_AC_PF_SF), 2), 0.001) AS I_AC_PF_SF,
				IFNULL(ROUND(AVG(dv.I_AC_Energy_WH), 2), 0.001) AS I_AC_Energy_WH,
				IFNULL(ROUND(AVG(dv.I_AC_Energy_WH_SF), 2), 0.001) AS I_AC_Energy_WH_SF,
				IFNULL(ROUND(AVG(dv.I_DC_Current), 2), 0.001) AS I_DC_Current,
				IFNULL(ROUND(AVG(dv.I_DC_Current_SF), 2), 0.001) AS I_DC_Current_SF,
				IFNULL(ROUND(AVG(dv.I_DC_Voltage), 2), 0.001) AS I_DC_Voltage,
				IFNULL(ROUND(AVG(dv.I_DC_Voltage_SF), 2), 0.001) AS I_DC_Voltage_SF,
				IFNULL(ROUND(AVG(dv.I_DC_Power), 2), 0.001) AS I_DC_Power,
				IFNULL(ROUND(AVG(dv.I_DC_Power_SF), 2), 0.001) AS I_DC_Power_SF,
				IFNULL(ROUND(AVG(dv.I_Temp_Sink), 2), 0.001) AS I_Temp_Sink,
				IFNULL(ROUND(AVG(dv.I_Temp_SF), 2), 0.001) AS I_Temp_SF,
				IFNULL(ROUND(AVG(dv.I_Status), 2), 0.001) AS I_Status,
				IFNULL(ROUND(AVG(dv.I_Status_Vendor), 2), 0.001) AS I_Status_Vendor,

			</if>
			
			<if test="table_name == 'model_sungrow_umg604'">
				IFNULL(ROUND(AVG(dv.M_AC_U1), 2), 0.001) AS M_AC_U1,
				IFNULL(ROUND(AVG(dv.M_AC_U2), 2), 0.001) AS M_AC_U2,
				IFNULL(ROUND(AVG(dv.M_AC_U3), 2), 0.001) AS M_AC_U3,
				IFNULL(ROUND(AVG(dv.M_AC_U_L1L2), 2), 0.001) AS M_AC_U_L1L2,
				IFNULL(ROUND(AVG(dv.M_AC_U_L2L3), 2), 0.001) AS M_AC_U_L2L3,
				IFNULL(ROUND(AVG(dv.M_AC_U_L3L1), 2), 0.001) AS M_AC_U_L3L1,
				IFNULL(ROUND(AVG(dv.M_AC_I1), 2), 0.001) AS M_AC_I1,
				IFNULL(ROUND(AVG(dv.M_AC_I2), 2), 0.001) AS M_AC_I2,
				IFNULL(ROUND(AVG(dv.M_AC_I3), 2), 0.001) AS M_AC_I3,
				IFNULL(ROUND(AVG(dv.M_AC_P1), 2), 0.001) AS M_AC_P1,
				IFNULL(ROUND(AVG(dv.M_AC_P2), 2), 0.001) AS M_AC_P2,
				IFNULL(ROUND(AVG(dv.M_AC_P3), 2), 0.001) AS M_AC_P3,
				
				IFNULL(ROUND(IF(AVG(dv.M_AC_P) <![CDATA[<]]> 0, 0, AVG(dv.M_AC_P)), 2), 0.001) AS M_AC_P,
				
				IFNULL(ROUND(AVG(dv.M_AC_E_M1), 2), 0.001) AS M_AC_E_M1,
				IFNULL(ROUND(AVG(dv.M_AC_Q1), 2), 0.001) AS M_AC_Q1,
				IFNULL(ROUND(AVG(dv.M_AC_Q2), 2), 0.001) AS M_AC_Q2,
				IFNULL(ROUND(AVG(dv.M_AC_Q3), 2), 0.001) AS M_AC_Q3,
				IFNULL(ROUND(AVG(dv.M_AC_Q), 2), 0.001) AS M_AC_Q,
				IFNULL(ROUND(AVG(dv.M_AC_S1), 2), 0.001) AS M_AC_S1,
				IFNULL(ROUND(AVG(dv.M_AC_S2), 2), 0.001) AS M_AC_S2,
				IFNULL(ROUND(AVG(dv.M_AC_S3), 2), 0.001) AS M_AC_S3,
				IFNULL(ROUND(AVG(dv.M_AC_S), 2), 0.001) AS M_AC_S,
				IFNULL(ROUND(AVG(dv.M_AC_PF), 2), 0.001) AS M_AC_PF,
				IFNULL(ROUND(AVG(dv.M_AC_F), 2), 0.001) AS M_AC_F,
				IFNULL(ROUND(AVG(dv.M_AC_E_EXP), 2), 0.001) AS M_AC_E_EXP,
				IFNULL(ROUND(AVG(dv.M_AC_E_IMP), 2), 0.001) AS M_AC_E_IMP,
			</if>
			<if test="table_name == 'model_sungrow_sg110cx'">
				IFNULL(ROUND(AVG(E_DAY), 2), 0.001) AS E_DAY,
				IFNULL(ROUND(AVG(E_TOTAL), 2), 0.001) AS E_TOTAL,
				IFNULL(ROUND(AVG(E_YEAR), 2), 0.001) AS E_YEAR,
				IFNULL(ROUND(AVG(OT_AC_TOTAL), 2), 0.001) AS OT_AC_TOTAL,
				IFNULL(ROUND(AVG(T_WR), 2), 0.001) AS T_WR,
				IFNULL(ROUND(AVG(U_DC1), 2), 0.001) AS U_DC1,
				IFNULL(ROUND(AVG(I_DC1), 2), 0.001) AS I_DC1,
				IFNULL(ROUND(AVG(U_DC2), 2), 0.001) AS U_DC2,
				IFNULL(ROUND(AVG(I_DC2), 2), 0.001) AS I_DC2,
				IFNULL(ROUND(AVG(U_DC3), 2), 0.001) AS U_DC3,
				IFNULL(ROUND(AVG(I_DC3), 2), 0.001) AS I_DC3,
				IFNULL(ROUND(AVG(U_DC4), 2), 0.001) AS U_DC4,
				IFNULL(ROUND(AVG(I_DC4), 2), 0.001) AS I_DC4,
				IFNULL(ROUND(AVG(U_DC5), 2), 0.001) AS U_DC5,
				IFNULL(ROUND(AVG(I_DC5), 2), 0.001) AS I_DC5,
				IFNULL(ROUND(AVG(U_DC6), 2), 0.001) AS U_DC6,
				IFNULL(ROUND(AVG(I_DC6), 2), 0.001) AS I_DC6,
				IFNULL(ROUND(AVG(U_DC7), 2), 0.001) AS U_DC7,
				IFNULL(ROUND(AVG(I_DC7), 2), 0.001) AS I_DC7,
				IFNULL(ROUND(AVG(U_DC8), 2), 0.001) AS U_DC8,
				IFNULL(ROUND(AVG(I_DC8), 2), 0.001) AS I_DC8,
				IFNULL(ROUND(AVG(U_DC9), 2), 0.001) AS U_DC9,
				IFNULL(ROUND(AVG(I_DC9), 2), 0.001) AS I_DC9,
				IFNULL(ROUND(AVG(U_STR1), 2), 0.001) AS U_STR1,
				IFNULL(ROUND(AVG(I_STR1), 2), 0.001) AS I_STR1,
				IFNULL(ROUND(AVG(U_STR2), 2), 0.001) AS U_STR2,
				IFNULL(ROUND(AVG(I_STR2), 2), 0.001) AS I_STR2,
				IFNULL(ROUND(AVG(U_STR3), 2), 0.001) AS U_STR3,
				IFNULL(ROUND(AVG(I_STR3), 2), 0.001) AS I_STR3,
				IFNULL(ROUND(AVG(U_STR4), 2), 0.001) AS U_STR4,
				IFNULL(ROUND(AVG(I_STR4), 2), 0.001) AS I_STR4,
				IFNULL(ROUND(AVG(U_STR5), 2), 0.001) AS U_STR5,
				IFNULL(ROUND(AVG(I_STR5), 2), 0.001) AS I_STR5,
				IFNULL(ROUND(AVG(U_STR6), 2), 0.001) AS U_STR6,
				IFNULL(ROUND(AVG(I_STR6), 2), 0.001) AS I_STR6,
				IFNULL(ROUND(AVG(U_STR7), 2), 0.001) AS U_STR7,
				IFNULL(ROUND(AVG(I_STR7), 2), 0.001) AS I_STR7,
				IFNULL(ROUND(AVG(U_STR8), 2), 0.001) AS U_STR8,
				IFNULL(ROUND(AVG(I_STR8), 2), 0.001) AS I_STR8,
				IFNULL(ROUND(AVG(U_STR9), 2), 0.001) AS U_STR9,
				IFNULL(ROUND(AVG(I_STR9), 2), 0.001) AS I_STR9,
				IFNULL(ROUND(AVG(U_STR10), 2), 0.001) AS U_STR10,
				IFNULL(ROUND(AVG(I_STR10), 2), 0.001) AS I_STR10,
				IFNULL(ROUND(AVG(U_STR11), 2), 0.001) AS U_STR11,
				IFNULL(ROUND(AVG(I_STR11), 2), 0.001) AS I_STR11,
				IFNULL(ROUND(AVG(U_STR12), 2), 0.001) AS U_STR12,
				IFNULL(ROUND(AVG(I_STR12), 2), 0.001) AS I_STR12,
				IFNULL(ROUND(AVG(U_STR13), 2), 0.001) AS U_STR13,
				IFNULL(ROUND(AVG(I_STR13), 2), 0.001) AS I_STR13,
				IFNULL(ROUND(AVG(U_STR14), 2), 0.001) AS U_STR14,
				IFNULL(ROUND(AVG(I_STR14), 2), 0.001) AS I_STR14,
				IFNULL(ROUND(AVG(U_STR15), 2), 0.001) AS U_STR15,
				IFNULL(ROUND(AVG(I_STR15), 2), 0.001) AS I_STR15,
				IFNULL(ROUND(AVG(U_STR16), 2), 0.001) AS U_STR16,
				IFNULL(ROUND(AVG(I_STR16), 2), 0.001) AS I_STR16,
				IFNULL(ROUND(AVG(U_STR17), 2), 0.001) AS U_STR17,
				IFNULL(ROUND(AVG(I_STR17), 2), 0.001) AS I_STR17,
				IFNULL(ROUND(AVG(U_STR18), 2), 0.001) AS U_STR18,
				IFNULL(ROUND(AVG(I_STR18), 2), 0.001) AS I_STR18,
				
				IFNULL(ROUND(IF(AVG(dv.P_DC) <![CDATA[<]]> 0, 0, AVG(dv.P_DC)), 2), 0.001) AS P_DC,
				
				IFNULL(ROUND(AVG(U_AC1), 2), 0.001) AS U_AC1,
				IFNULL(ROUND(AVG(U_AC2), 2), 0.001) AS U_AC2,
				IFNULL(ROUND(AVG(U_AC3), 2), 0.001) AS U_AC3,
				IFNULL(ROUND(AVG(I_AC1), 2), 0.001) AS I_AC1,
				IFNULL(ROUND(AVG(I_AC2), 2), 0.001) AS I_AC2,
				IFNULL(ROUND(AVG(I_AC3), 2), 0.001) AS I_AC3,
				IFNULL(ROUND(AVG(S_AC), 2), 0.001) AS S_AC,
				IFNULL(ROUND(AVG(P_AC), 2), 0.001) AS P_AC,
				IFNULL(ROUND(AVG(Q_AC), 2), 0.001) AS Q_AC,
				IFNULL(ROUND(AVG(COS_PHI), 2), 0.001) AS COS_PHI,
				IFNULL(ROUND(AVG(F_AC), 2), 0.001) AS F_AC,
				IFNULL(ROUND(AVG(FT_AC_DAY), 2), 0.001) AS FT_AC_DAY,
				IFNULL(ROUND(AVG(R_ISO), 2), 0.001) AS R_ISO,
			</if>
			<if test="table_name == 'model_sungrow_sg50cx'">
				IFNULL(ROUND(AVG(E_DAY), 2), 0.001) AS E_DAY,
				IFNULL(ROUND(AVG(E_TOTAL), 2), 0.001) AS E_TOTAL,
				IFNULL(ROUND(AVG(E_YEAR), 2), 0.001) AS E_YEAR,
				IFNULL(ROUND(AVG(OT_AC_TOTAL), 2), 0.001) AS OT_AC_TOTAL,
				IFNULL(ROUND(AVG(T_WR), 2), 0.001) AS T_WR,
				IFNULL(ROUND(AVG(U_DC1), 2), 0.001) AS U_DC1,
				IFNULL(ROUND(AVG(I_DC1), 2), 0.001) AS I_DC1,
				IFNULL(ROUND(AVG(U_DC2), 2), 0.001) AS U_DC2,
				IFNULL(ROUND(AVG(I_DC2), 2), 0.001) AS I_DC2,
				IFNULL(ROUND(AVG(U_DC3), 2), 0.001) AS U_DC3,
				IFNULL(ROUND(AVG(I_DC3), 2), 0.001) AS I_DC3,
				IFNULL(ROUND(AVG(U_DC4), 2), 0.001) AS U_DC4,
				IFNULL(ROUND(AVG(I_DC4), 2), 0.001) AS I_DC4,
				IFNULL(ROUND(AVG(U_DC5), 2), 0.001) AS U_DC5,
				IFNULL(ROUND(AVG(I_DC5), 2), 0.001) AS I_DC5,
				IFNULL(ROUND(AVG(U_DC6), 2), 0.001) AS U_DC6,
				IFNULL(ROUND(AVG(I_DC6), 2), 0.001) AS I_DC6,
				IFNULL(ROUND(AVG(U_DC7), 2), 0.001) AS U_DC7,
				IFNULL(ROUND(AVG(I_DC7), 2), 0.001) AS I_DC7,
				IFNULL(ROUND(AVG(U_DC8), 2), 0.001) AS U_DC8,
				IFNULL(ROUND(AVG(I_DC8), 2), 0.001) AS I_DC8,
				IFNULL(ROUND(AVG(U_DC9), 2), 0.001) AS U_DC9,
				IFNULL(ROUND(AVG(I_DC9), 2), 0.001) AS I_DC9,
				IFNULL(ROUND(AVG(U_DC10), 2), 0.001) AS U_DC10,
				IFNULL(ROUND(AVG(I_DC10), 2), 0.001) AS I_DC10,
				IFNULL(ROUND(AVG(U_DC11), 2), 0.001) AS U_DC11,
				IFNULL(ROUND(AVG(I_DC11), 2), 0.001) AS I_DC11,
				IFNULL(ROUND(AVG(U_DC12), 2), 0.001) AS U_DC12,
				IFNULL(ROUND(AVG(I_DC12), 2), 0.001) AS I_DC12,
				IFNULL(ROUND(AVG(U_DC13), 2), 0.001) AS U_DC13,
				IFNULL(ROUND(AVG(I_DC13), 2), 0.001) AS I_DC13,
				IFNULL(ROUND(AVG(U_DC14), 2), 0.001) AS U_DC14,
				IFNULL(ROUND(AVG(I_DC14), 2), 0.001) AS I_DC14,
				IFNULL(ROUND(AVG(U_DC15), 2), 0.001) AS U_DC15,
				IFNULL(ROUND(AVG(I_DC15), 2), 0.001) AS I_DC15,
				IFNULL(ROUND(AVG(U_DC16), 2), 0.001) AS U_DC16,
				IFNULL(ROUND(AVG(I_DC16), 2), 0.001) AS I_DC16,
				IFNULL(ROUND(AVG(U_DC17), 2), 0.001) AS U_DC17,
				IFNULL(ROUND(AVG(I_DC17), 2), 0.001) AS I_DC17,
				IFNULL(ROUND(AVG(U_DC18), 2), 0.001) AS U_DC18,
				IFNULL(ROUND(AVG(I_DC18), 2), 0.001) AS I_DC18,
				IFNULL(ROUND(AVG(U_DC19), 2), 0.001) AS U_DC19,
				IFNULL(ROUND(AVG(I_DC19), 2), 0.001) AS I_DC19,
				IFNULL(ROUND(AVG(U_DC20), 2), 0.001) AS U_DC20,
				IFNULL(ROUND(AVG(I_DC20), 2), 0.001) AS I_DC20,
			
				IFNULL(ROUND(AVG(U_STR1), 2), 0.001) AS U_STR1,
				IFNULL(ROUND(AVG(I_STR1), 2), 0.001) AS I_STR1,
				IFNULL(ROUND(AVG(U_STR2), 2), 0.001) AS U_STR2,
				IFNULL(ROUND(AVG(I_STR2), 2), 0.001) AS I_STR2,
				IFNULL(ROUND(AVG(U_STR3), 2), 0.001) AS U_STR3,
				IFNULL(ROUND(AVG(I_STR3), 2), 0.001) AS I_STR3,
				IFNULL(ROUND(AVG(U_STR4), 2), 0.001) AS U_STR4,
				IFNULL(ROUND(AVG(I_STR4), 2), 0.001) AS I_STR4,
				IFNULL(ROUND(AVG(U_STR5), 2), 0.001) AS U_STR5,
				IFNULL(ROUND(AVG(I_STR5), 2), 0.001) AS I_STR5,
				IFNULL(ROUND(AVG(U_STR6), 2), 0.001) AS U_STR6,
				IFNULL(ROUND(AVG(I_STR6), 2), 0.001) AS I_STR6,
				IFNULL(ROUND(AVG(U_STR7), 2), 0.001) AS U_STR7,
				IFNULL(ROUND(AVG(I_STR7), 2), 0.001) AS I_STR7,
				IFNULL(ROUND(AVG(U_STR8), 2), 0.001) AS U_STR8,
				IFNULL(ROUND(AVG(I_STR8), 2), 0.001) AS I_STR8,
				IFNULL(ROUND(AVG(U_STR9), 2), 0.001) AS U_STR9,
				IFNULL(ROUND(AVG(I_STR9), 2), 0.001) AS I_STR9,
				IFNULL(ROUND(AVG(U_STR10), 2), 0.001) AS U_STR10,
				IFNULL(ROUND(AVG(I_STR10), 2), 0.001) AS I_STR10,
				IFNULL(ROUND(AVG(I_STR11), 2), 0.001) AS I_STR11,
				IFNULL(ROUND(AVG(I_STR12), 2), 0.001) AS I_STR12,
				IFNULL(ROUND(AVG(I_STR13), 2), 0.001) AS I_STR13,
				IFNULL(ROUND(AVG(I_STR14), 2), 0.001) AS I_STR14,
				IFNULL(ROUND(AVG(I_STR15), 2), 0.001) AS I_STR15,
				IFNULL(ROUND(AVG(I_STR16), 2), 0.001) AS I_STR16,
				IFNULL(ROUND(AVG(I_STR17), 2), 0.001) AS I_STR17,
				IFNULL(ROUND(AVG(I_STR18), 2), 0.001) AS I_STR18,
				IFNULL(ROUND(AVG(I_STR19), 2), 0.001) AS I_STR19,
				IFNULL(ROUND(AVG(I_STR20), 2), 0.001) AS I_STR20,
				IFNULL(ROUND(AVG(I_STR21), 2), 0.001) AS I_STR21,
				IFNULL(ROUND(AVG(I_STR22), 2), 0.001) AS I_STR22,
				
				IFNULL(ROUND(IF(AVG(dv.P_DC) <![CDATA[<]]> 0, 0, AVG(dv.P_DC)), 2), 0.001) AS P_DC,
				
				IFNULL(ROUND(AVG(U_AC1), 2), 0.001) AS U_AC1,
				IFNULL(ROUND(AVG(U_AC2), 2), 0.001) AS U_AC2,
				IFNULL(ROUND(AVG(U_AC3), 2), 0.001) AS U_AC3,
				IFNULL(ROUND(AVG(I_AC1), 2), 0.001) AS I_AC1,
				IFNULL(ROUND(AVG(I_AC2), 2), 0.001) AS I_AC2,
				IFNULL(ROUND(AVG(I_AC3), 2), 0.001) AS I_AC3,
				IFNULL(ROUND(AVG(S_AC), 2), 0.001) AS S_AC,
				IFNULL(ROUND(AVG(P_AC), 2), 0.001) AS P_AC,
				IFNULL(ROUND(AVG(Q_AC), 2), 0.001) AS Q_AC,
				IFNULL(ROUND(AVG(COS_PHI), 2), 0.001) AS COS_PHI,
				IFNULL(ROUND(AVG(F_AC), 2), 0.001) AS F_AC,
				IFNULL(ROUND(AVG(FT_AC_DAY), 2), 0.001) AS FT_AC_DAY,
				IFNULL(ROUND(AVG(R_ISO), 2), 0.001) AS R_ISO,
			</if>
			<if test="table_name == 'model_sungrow_weather_pvmet75200'">
				  IFNULL(ROUND(AVG(dv.SRAD_D_H), 2), 0.001) AS SRAD_D_H,
			</if>
			
			
			<if test="table_name == 'model_imtsolar_tmodul_class8006'">
				  IFNULL(ROUND(AVG(dv.ModuleTemperature), 2), 0.001) AS ModuleTemperature,
			</if>
			
			<if test="table_name == 'model_hukseflux_sr30d1_deviceclass_v0'">
				  
				  IFNULL(ROUND(IF(AVG(dv.IrradianceTcs) <![CDATA[<]]> 0, 0, AVG(dv.IrradianceTcs)), 2), 0.001) AS IrradianceTcs,
				  
			      IFNULL(ROUND(AVG(dv.IrradianceUs), 2), 0.001) AS IrradianceUs,
			      IFNULL(ROUND(AVG(dv.SensorBodyTemperature), 2), 0.001) AS SensorBodyTemperature,
			      IFNULL(ROUND(AVG(dv.SensorElectricalResistance), 2), 0.001) AS SensorElectricalResistance,
			      IFNULL(ROUND(AVG(dv.ScalingFactorIrradiance), 2), 0.001) AS ScalingFactorIrradiance,
			      IFNULL(ROUND(AVG(dv.ScalingFactorTemperature), 2), 0.001) AS ScalingFactorTemperature,
			      IFNULL(ROUND(AVG(dv.SensorSerialNumber), 2), 0.001) AS SensorSerialNumber,
			      IFNULL(ROUND(AVG(dv.SensorSensitivity), 2), 0.001) AS SensorSensitivity,
			      IFNULL(ROUND(AVG(dv.SensorCalibrationDate), 2), 0.001) AS SensorCalibrationDate,
			      IFNULL(ROUND(AVG(dv.InternalHumidity), 2), 0.001) AS InternalHumidity,
			      IFNULL(ROUND(AVG(dv.TiltAngle), 2), 0.001) AS TiltAngle,
			      IFNULL(ROUND(AVG(dv.TiltAngleaverage), 2), 0.001) AS TiltAngleaverage,
			      IFNULL(ROUND(AVG(dv.FanSpeedRPM), 2), 0.001) AS FanSpeedRPM,
			      IFNULL(ROUND(AVG(dv.HeaterCurrent), 2), 0.001) AS HeaterCurrent,
			      IFNULL(ROUND(AVG(dv.FanCurrent), 2), 0.001) AS FanCurrent,
			</if>
			
			
			<if test="table_name == 'model_sunny_central_class9775_inverter'">
				  IFNULL(ROUND(AVG(dv.Fault), 2), 0.001) AS Fault,
			      IFNULL(ROUND(AVG(dv.OperatingState), 2), 0.001) AS OperatingState,
			      IFNULL(ROUND(AVG(dv.Status), 2), 0.001) AS Status,
			      IFNULL(ROUND(AVG(dv.EventNumber), 2), 0.001) AS EventNumber,
			      IFNULL(ROUND(AVG(dv.LifekWhTotal), 2), 0.001) AS LifekWhTotal,
			      IFNULL(ROUND(AVG(dv.PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(dv.PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(dv.PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(dv.ACPower), 2), 0.001) AS ACPower,
			      IFNULL(ROUND(AVG(dv.ACVoltageAB), 2), 0.001) AS ACVoltageAB,
			      IFNULL(ROUND(AVG(dv.ACVoltageBC), 2), 0.001) AS ACVoltageBC,
			      IFNULL(ROUND(AVG(dv.ACVoltageCA), 2), 0.001) AS ACVoltageCA,
			      IFNULL(ROUND(AVG(dv.ACCurrent), 2), 0.001) AS ACCurrent,
			      IFNULL(ROUND(AVG(dv.ACCurrentL1), 2), 0.001) AS ACCurrentL1,
			      IFNULL(ROUND(AVG(dv.ACCurrentL2), 2), 0.001) AS ACCurrentL2,
			      IFNULL(ROUND(AVG(dv.ACCurrentL3), 2), 0.001) AS ACCurrentL3,
			      IFNULL(ROUND(AVG(dv.ACFrequency), 2), 0.001) AS ACFrequency,
			      IFNULL(ROUND(AVG(dv.ReactivePower), 2), 0.001) AS ReactivePower,
			      IFNULL(ROUND(AVG(dv.ApparentPower), 2), 0.001) AS ApparentPower,
			      IFNULL(ROUND(AVG(dv.PowerFactor), 2), 0.001) AS PowerFactor,
			      IFNULL(ROUND(AVG(dv.ReactivePowerMode), 2), 0.001) AS ReactivePowerMode,
			      IFNULL(ROUND(AVG(dv.PowerFactorFeedback), 2), 0.001) AS PowerFactorFeedback,
			      IFNULL(ROUND(AVG(dv.OperatingMode), 2), 0.001) AS OperatingMode,
			      IFNULL(ROUND(AVG(dv.ACPowerLimit), 2), 0.001) AS ACPowerLimit,
			      IFNULL(ROUND(AVG(dv.ACVoltage), 2), 0.001) AS ACVoltage,
			      IFNULL(ROUND(AVG(dv.HeatSinkTemp), 2), 0.001) AS HeatSinkTemp,
			      IFNULL(ROUND(AVG(dv.InteriorTemperature), 2), 0.001) AS InteriorTemperature,
			      IFNULL(ROUND(AVG(dv.ExternalTemperature), 2), 0.001) AS ExternalTemperature,
			</if>
			
			
			<if test="table_name == 'model_tti_tracker'">
				  IFNULL(ROUND(AVG(dv.Mode), 2), 0.001) AS Mode,
			      IFNULL(ROUND(AVG(dv.SubMode), 2), 0.001) AS SubMode,
			      IFNULL(ROUND(AVG(dv.MotorStatus), 2), 0.001) AS MotorStatus,
			      IFNULL(ROUND(AVG(dv.ReadAngle), 2), 0.001) AS ReadAngle,
			      IFNULL(ROUND(AVG(dv.SetAngle), 2), 0.001) AS SetAngle,
			      IFNULL(ROUND(AVG(dv.OptimalAngle), 2), 0.001) AS OptimalAngle,
			      IFNULL(ROUND(AVG(dv.WindSpeed), 2), 0.001) AS WindSpeed,
			      IFNULL(ROUND(AVG(dv.TTiTime), 2), 0.001) AS TTiTime,
			      IFNULL(ROUND(AVG(dv.MotorFault), 2), 0.001) AS MotorFault,
			      IFNULL(ROUND(AVG(dv.RemoteInterfaceFault), 2), 0.001) AS RemoteInterfaceFault,
			      IFNULL(ROUND(AVG(dv.InclinometerFault), 2), 0.001) AS InclinometerFault,
			      IFNULL(ROUND(AVG(dv.ModbusAddress), 2), 0.001) AS ModbusAddress,
			      IFNULL(ROUND(AVG(dv.FirmwareVersion), 2), 0.001) AS FirmwareVersion,
			      IFNULL(ROUND(AVG(dv.Units), 2), 0.001) AS Units,
			      IFNULL(ROUND(AVG(dv.InclinometerOffset), 2), 0.001) AS InclinometerOffset,
			      IFNULL(ROUND(AVG(dv.MotorStopDelay), 2), 0.001) AS MotorStopDelay,
			      IFNULL(ROUND(AVG(dv.CoastAngle), 2), 0.001) AS CoastAngle,
			      IFNULL(ROUND(AVG(dv.MaxRotationWest), 2), 0.001) AS MaxRotationWest,
			      IFNULL(ROUND(AVG(dv.MaxRotationEast), 2), 0.001) AS MaxRotationEast,
			      IFNULL(ROUND(AVG(dv.SoftAngleLimitsEnabled), 2), 0.001) AS SoftAngleLimitsEnabled,
			      IFNULL(ROUND(AVG(dv.MotorMonitorSampleTime), 2), 0.001) AS MotorMonitorSampleTime,
			      IFNULL(ROUND(AVG(dv.MotorMonitorMinAngle), 2), 0.001) AS MotorMonitorMinAngle,
			      IFNULL(ROUND(AVG(dv.EnableMotorMonitor), 2), 0.001) AS EnableMotorMonitor,
			      IFNULL(ROUND(AVG(dv.DeadBand), 2), 0.001) AS DeadBand,
			      IFNULL(ROUND(AVG(dv.NightTimeStowAltitude), 2), 0.001) AS NightTimeStowAltitude,
			      IFNULL(ROUND(AVG(dv.NightTimeStowAngle), 2), 0.001) AS NightTimeStowAngle,
			      IFNULL(ROUND(AVG(dv.PoleSpacing), 2), 0.001) AS PoleSpacing,
			      IFNULL(ROUND(AVG(dv.ModuleWidth), 2), 0.001) AS ModuleWidth,
			      IFNULL(ROUND(AVG(dv.MotorPolarity), 2), 0.001) AS MotorPolarity,
			      IFNULL(ROUND(AVG(dv.InclinometerPolarity), 2), 0.001) AS InclinometerPolarity,
			      IFNULL(ROUND(AVG(dv.Latitude), 2), 0.001) AS Latitude,
			      IFNULL(ROUND(AVG(dv.Longitude), 2), 0.001) AS Longitude,
			      IFNULL(ROUND(AVG(dv.LoggingInterval), 2), 0.001) AS LoggingInterval,
			      IFNULL(ROUND(AVG(dv.HelicalVarationAngle), 2), 0.001) AS HelicalVarationAngle,
			      IFNULL(ROUND(AVG(dv.DriveArmSlope), 2), 0.001) AS DriveArmSlope,
			      IFNULL(ROUND(AVG(dv.WindConstant), 2), 0.001) AS WindConstant,
			      IFNULL(ROUND(AVG(dv.WindStowSpeed), 2), 0.001) AS WindStowSpeed,
			      IFNULL(ROUND(AVG(dv.WindStowTime), 2), 0.001) AS WindStowTime,
			</if>
			
			<if test="table_name == 'model_chint_solectria_inverter_class9725'">
				  IFNULL(ROUND(AVG(dv.PowerOnOff), 2), 0.001) AS PowerOnOff,
			      IFNULL(ROUND(AVG(dv.PActiveSet), 2), 0.001) AS PActiveSet,
			      IFNULL(ROUND(AVG(dv.PFactorSet), 2), 0.001) AS PFactorSet,
			      IFNULL(ROUND(AVG(dv.PReactiveSet), 2), 0.001) AS PReactiveSet,
			      IFNULL(ROUND(AVG(dv.GridVMax), 2), 0.001) AS GridVMax,
			      IFNULL(ROUND(AVG(dv.GridVmaxTripT), 2), 0.001) AS GridVmaxTripT,
			      IFNULL(ROUND(AVG(dv.GridVMin), 2), 0.001) AS GridVMin,
			      IFNULL(ROUND(AVG(dv.GridVminTripT), 2), 0.001) AS GridVminTripT,
			      IFNULL(ROUND(AVG(dv.GridFMax), 2), 0.001) AS GridFMax,
			      IFNULL(ROUND(AVG(dv.GridFMin), 2), 0.001) AS GridFMin,
			      IFNULL(ROUND(AVG(dv.GridFTripT), 2), 0.001) AS GridFTripT,
			      IFNULL(ROUND(AVG(dv.ActivePower), 2), 0.001) AS ActivePower,
			      IFNULL(ROUND(AVG(dv.PowerFactor), 2), 0.001) AS PowerFactor,
			      IFNULL(ROUND(AVG(dv.Risomin), 2), 0.001) AS Risomin,
			      IFNULL(ROUND(AVG(dv.PVStartVol), 2), 0.001) AS PVStartVol,
			      IFNULL(ROUND(AVG(dv.DCIMax), 2), 0.001) AS DCIMax,
			      IFNULL(ROUND(AVG(dv.TambientMax), 2), 0.001) AS TambientMax,
			      IFNULL(ROUND(AVG(dv.TmoduleMax), 2), 0.001) AS TmoduleMax,
			      IFNULL(ROUND(AVG(dv.OffsetDiffMax), 2), 0.001) AS OffsetDiffMax,
			      IFNULL(ROUND(AVG(dv.GridVolUnbalance), 2), 0.001) AS GridVolUnbalance,
			      IFNULL(ROUND(AVG(dv.SoftPowerStep), 2), 0.001) AS SoftPowerStep,
			      IFNULL(ROUND(AVG(dv.TotalEnergyToEnergy), 2), 0.001) AS TotalEnergyToEnergy,
			      IFNULL(ROUND(AVG(dv.TotalEnergyToday), 2), 0.001) AS TotalEnergyToday,
			      IFNULL(ROUND(AVG(dv.InverterEfficiency), 2), 0.001) AS InverterEfficiency,
			      IFNULL(ROUND(AVG(dv.PowerFactor1), 2), 0.001) AS PowerFactor1,
			      IFNULL(ROUND(AVG(dv.MaxActivePowerToday), 2), 0.001) AS MaxActivePowerToday,
			      IFNULL(ROUND(AVG(dv.RunTimeToGrid), 2), 0.001) AS RunTimeToGrid,
			      
			      IFNULL(ROUND(IF(AVG(dv.AC_ActivePower) <![CDATA[<]]> 0, 0, AVG(dv.AC_ActivePower)), 2), 0.001) AS AC_ActivePower,
			      
			      IFNULL(ROUND(AVG(dv.AC_ApparentPower), 2), 0.001) AS AC_ApparentPower,
			      IFNULL(ROUND(AVG(dv.GridVoltageUab), 2), 0.001) AS GridVoltageUab,
			      IFNULL(ROUND(AVG(dv.GridVoltageUbc), 2), 0.001) AS GridVoltageUbc,
			      IFNULL(ROUND(AVG(dv.GridVoltageUca), 2), 0.001) AS GridVoltageUca,
			      IFNULL(ROUND(AVG(dv.GridA_PhaseCurrent), 2), 0.001) AS GridA_PhaseCurrent,
			      IFNULL(ROUND(AVG(dv.GridB_PhaseCurrent), 2), 0.001) AS GridB_PhaseCurrent,
			      IFNULL(ROUND(AVG(dv.GridC_PhaseCurrent), 2), 0.001) AS GridC_PhaseCurrent,
			      IFNULL(ROUND(AVG(dv.PV1_Voltage), 2), 0.001) AS PV1_Voltage,
			      IFNULL(ROUND(AVG(dv.PV1_Current), 2), 0.001) AS PV1_Current,
			      IFNULL(ROUND(AVG(dv.PV2_Voltage), 2), 0.001) AS PV2_Voltage,
			      IFNULL(ROUND(AVG(dv.PV2_Current), 2), 0.001) AS PV2_Current,
			      IFNULL(ROUND(AVG(dv.PV3_Voltage), 2), 0.001) AS PV3_Voltage,
			      IFNULL(ROUND(AVG(dv.PV3_Current), 2), 0.001) AS PV3_Current,
			      IFNULL(ROUND(AVG(dv.Grid_Frequency), 2), 0.001) AS Grid_Frequency,
			      IFNULL(ROUND(AVG(dv.ModuleTemp), 2), 0.001) AS ModuleTemp,
			      IFNULL(ROUND(AVG(dv.InternalTemp), 2), 0.001) AS InternalTemp,
			      IFNULL(ROUND(AVG(dv.TransformerTemp), 2), 0.001) AS TransformerTemp,
			      IFNULL(ROUND(AVG(dv.PermanentFaultCode), 2), 0.001) AS PermanentFaultCode,
			      IFNULL(ROUND(AVG(dv.WarnCode), 2), 0.001) AS WarnCode,
			      IFNULL(ROUND(AVG(dv.FaultCode0), 2), 0.001) AS FaultCode0,
			      IFNULL(ROUND(AVG(dv.FaultCode1), 2), 0.001) AS FaultCode1,
			      IFNULL(ROUND(AVG(dv.FaultCode2), 2), 0.001) AS FaultCode2,
			</if>
			
			<if test="table_name == 'model_pv_powered_35_50_260_500kw_inverter'">
			IFNULL(ROUND(AVG(dv.VoltageAN), 2), 0.001) AS VoltageAN,
			IFNULL(ROUND(AVG(dv.VoltageBN), 2), 0.001) AS VoltageBN,
			IFNULL(ROUND(AVG(dv.VoltageCN), 2), 0.001) AS VoltageCN,
			IFNULL(ROUND(AVG(dv.CurrentA), 2), 0.001) AS CurrentA,
			IFNULL(ROUND(AVG(dv.CurrentB), 2), 0.001) AS CurrentB,
			IFNULL(ROUND(AVG(dv.CurrentC), 2), 0.001) AS CurrentC,
			IFNULL(ROUND(AVG(dv.DCInputVoltage), 2), 0.001) AS DCInputVoltage,
			IFNULL(ROUND(AVG(dv.DCInputCurrent), 2), 0.001) AS DCInputCurrent,
			IFNULL(ROUND(AVG(dv.LineFrequency), 2), 0.001) AS LineFrequency,
			
			IFNULL(ROUND(IF(AVG(dv.OutputGeneration) <![CDATA[<]]> 0, 0, AVG(dv.OutputGeneration)), 2), 0.001) AS OutputGeneration,
			
			IFNULL(ROUND(AVG(dv.TotalEnergyGeneration), 2), 0.001) AS TotalEnergyGeneration,
			IFNULL(ROUND(AVG(dv.PVInputVoltage), 2), 0.001) AS PVInputVoltage,
			IFNULL(ROUND(AVG(dv.InputGenerationCalculated), 2), 0.001) AS InputGenerationCalculated,
			IFNULL(ROUND(AVG(dv.InverterOperatingStatus), 2), 0.001) AS InverterOperatingStatus,
			IFNULL(ROUND(AVG(dv.MainFault), 2), 0.001) AS MainFault,
			IFNULL(ROUND(AVG(dv.DriveFault), 2), 0.001) AS DriveFault,
			IFNULL(ROUND(AVG(dv.VoltageFault), 2), 0.001) AS VoltageFault,
			IFNULL(ROUND(AVG(dv.GridFault), 2), 0.001) AS GridFault,
			IFNULL(ROUND(AVG(dv.TemperatureFault), 2), 0.001) AS TemperatureFault,
			IFNULL(ROUND(AVG(dv.SystemFault), 2), 0.001) AS SystemFault,
			IFNULL(ROUND(AVG(dv.SystemWarnings), 2), 0.001) AS SystemWarnings,
			IFNULL(ROUND(AVG(dv.PVMStatusCodes), 2), 0.001) AS PVMStatusCodes,
			</if>
			<if test="table_name == 'model_shark100'">
				  IFNULL(ROUND(AVG(dv.volts_a_n), 2), 0.001) AS volts_a_n,
			      IFNULL(ROUND(AVG(dv.volts_b_n), 2), 0.001) AS volts_b_n,
			      IFNULL(ROUND(AVG(dv.volts_c_n), 2), 0.001) AS volts_c_n,
			      IFNULL(ROUND(AVG(dv.volts_a_b), 2), 0.001) AS volts_a_b,
			      IFNULL(ROUND(AVG(dv.volts_c_a), 2), 0.001) AS volts_c_a,
			      IFNULL(ROUND(AVG(dv.amps_a), 2), 0.001) AS amps_a,
			      IFNULL(ROUND(AVG(dv.amps_b), 2), 0.001) AS amps_b,
			      IFNULL(ROUND(AVG(dv.amps_c), 2), 0.001) AS amps_c,
			      
			      IFNULL(ROUND(IF(AVG(dv.watts_3ph_total) <![CDATA[<]]> 0, 0, AVG(dv.watts_3ph_total)), 2), 0.001) AS watts_3ph_total,
			      
			      IFNULL(ROUND(AVG(dv.vars_3ph_total), 2), 0.001) AS vars_3ph_total,
			      IFNULL(ROUND(AVG(dv.vas_3ph_total), 2), 0.001) AS vas_3ph_total,
			      IFNULL(ROUND(AVG(dv.power_factor_3ph_total), 2), 0.001) AS power_factor_3ph_total,
			      IFNULL(ROUND(AVG(dv.frequency), 2), 0.001) AS frequency,
			      IFNULL(ROUND(AVG(dv.neutral_current), 2), 0.001) AS neutral_current,
			      IFNULL(ROUND(AVG(dv.w_hours_received), 2), 0.001) AS w_hours_received,
			      IFNULL(ROUND(AVG(dv.w_hours_delivered), 2), 0.001) AS w_hours_delivered,
			      IFNULL(ROUND(AVG(dv.w_hours_net), 2), 0.001) AS w_hours_net,
			      IFNULL(ROUND(AVG(dv.w_hours_total), 2), 0.001) AS w_hours_total,
			      IFNULL(ROUND(AVG(dv.var_hours_positive), 2), 0.001) AS var_hours_positive,
			      IFNULL(ROUND(AVG(dv.var_hours_negative), 2), 0.001) AS var_hours_negative,
			      IFNULL(ROUND(AVG(dv.var_hours_net), 2), 0.001) AS var_hours_net,
			      IFNULL(ROUND(AVG(dv.var_hours_total), 2), 0.001) AS var_hours_total,
			      IFNULL(ROUND(AVG(dv.va_hours_total), 2), 0.001) AS va_hours_total,
			      IFNULL(ROUND(AVG(dv.amps_a_average), 2), 0.001) AS amps_a_average,
			      IFNULL(ROUND(AVG(dv.amps_b_average), 2), 0.001) AS amps_b_average,
			      IFNULL(ROUND(AVG(dv.amps_c_average), 2), 0.001) AS amps_c_average,
			      IFNULL(ROUND(AVG(dv.positive_watts_3ph_average), 2), 0.001) AS positive_watts_3ph_average,
			      IFNULL(ROUND(AVG(dv.positive_vars_3ph_average), 2), 0.001) AS positive_vars_3ph_average,
			      IFNULL(ROUND(AVG(dv.negative_watts_3ph_average), 2), 0.001) AS negative_watts_3ph_average,
			      IFNULL(ROUND(AVG(dv.negative_vars_3ph_average), 2), 0.001) AS negative_vars_3ph_average,
			      IFNULL(ROUND(AVG(dv.vas_3ph_average), 2), 0.001) AS vas_3ph_average,
			      IFNULL(ROUND(AVG(dv.positive_pf_3ph_average), 2), 0.001) AS positive_pf_3ph_average,
			      IFNULL(ROUND(AVG(dv.negative_pf_3ph_average), 2), 0.001) AS negative_pf_3ph_average,
			      IFNULL(ROUND(AVG(dv.volts_a_n_min), 2), 0.001) AS volts_a_n_min,
			      IFNULL(ROUND(AVG(dv.volts_b_n_min), 2), 0.001) AS volts_b_n_min,
			      IFNULL(ROUND(AVG(dv.volts_c_n_min), 2), 0.001) AS volts_c_n_min,
			      IFNULL(ROUND(AVG(dv.volts_a_b_min), 2), 0.001) AS volts_a_b_min,
			      IFNULL(ROUND(AVG(dv.volts_b_c_min), 2), 0.001) AS volts_b_c_min,
			      IFNULL(ROUND(AVG(dv.volts_c_a_min), 2), 0.001) AS volts_c_a_min,
			      IFNULL(ROUND(AVG(dv.amps_a_min_avg_demand), 2), 0.001) AS amps_a_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.amps_b_min_avg_demand), 2), 0.001) AS amps_b_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.amps_c_min_avg_demand), 2), 0.001) AS amps_c_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_watts_3ph_min_avg_demand), 2), 0.001) AS positive_watts_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_vars_3ph_min_avg_demand), 2), 0.001) AS positive_vars_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_watts_3ph_min_avg_demand), 2), 0.001) AS negative_watts_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_vars_3ph_min_avg_demand), 2), 0.001) AS negative_vars_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.vas_3ph_min_avg_demand), 2), 0.001) AS vas_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_pf_3ph_min_avg_demand), 2), 0.001) AS positive_pf_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_pf_3ph_min_avg_demand), 2), 0.001) AS negative_pf_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(dv.frequency_min), 2), 0.001) AS frequency_min,
			      IFNULL(ROUND(AVG(dv.volts_a_n_max), 2), 0.001) AS volts_a_n_max,
			      IFNULL(ROUND(AVG(dv.volts_b_n_max), 2), 0.001) AS volts_b_n_max,
			      IFNULL(ROUND(AVG(dv.volts_c_n_max), 2), 0.001) AS volts_c_n_max,
			      IFNULL(ROUND(AVG(dv.volts_a_b_max), 2), 0.001) AS volts_a_b_max,
			      IFNULL(ROUND(AVG(dv.volts_b_c_max), 2), 0.001) AS volts_b_c_max,
			      IFNULL(ROUND(AVG(dv.volts_c_a_max), 2), 0.001) AS volts_c_a_max,
			      IFNULL(ROUND(AVG(dv.amps_a_max_avg_demand), 2), 0.001) AS amps_a_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.amps_b_max_avg_demand), 2), 0.001) AS amps_b_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.amps_c_max_avg_demand), 2), 0.001) AS amps_c_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_watts_3ph_max_avg_demand), 2), 0.001) AS positive_watts_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_vars_3ph_max_avg_demand), 2), 0.001) AS positive_vars_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_watts_3ph_max_avg_demand), 2), 0.001) AS negative_watts_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_vars_3ph_max_avg_demand), 2), 0.001) AS negative_vars_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.vas_3ph_max_avg_demand), 2), 0.001) AS vas_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.positive_pf_3ph_max_avg_demand), 2), 0.001) AS positive_pf_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.negative_pf_3ph_max_avg_demand), 2), 0.001) AS negative_pf_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(dv.frequency_max), 2), 0.001) AS frequency_max,
			      IFNULL(ROUND(AVG(dv.volts_a_n_thd), 2), 0.001) AS volts_a_n_thd,
			      IFNULL(ROUND(AVG(dv.volts_b_n_thd), 2), 0.001) AS volts_b_n_thd,
			      IFNULL(ROUND(AVG(dv.volts_c_n_thd), 2), 0.001) AS volts_c_n_thd,
			      IFNULL(ROUND(AVG(dv.amps_a_thd), 2), 0.001) AS amps_a_thd,
			      IFNULL(ROUND(AVG(dv.amps_b_thd), 2), 0.001) AS amps_b_thd,
			      IFNULL(ROUND(AVG(dv.amps_c_thd), 2), 0.001) AS amps_c_thd,
			      IFNULL(ROUND(AVG(dv.phase_a_current_0th), 2), 0.001) AS phase_a_current_0th,
			      IFNULL(ROUND(AVG(dv.phase_a_current_1st), 2), 0.001) AS phase_a_current_1st,
			      IFNULL(ROUND(AVG(dv.phase_a_current_2nd), 2), 0.001) AS phase_a_current_2nd,
			      IFNULL(ROUND(AVG(dv.phase_a_current_3rd), 2), 0.001) AS phase_a_current_3rd,
			      IFNULL(ROUND(AVG(dv.phase_a_current_4th), 2), 0.001) AS phase_a_current_4th,
			      IFNULL(ROUND(AVG(dv.phase_a_current_5th), 2), 0.001) AS phase_a_current_5th,
			      IFNULL(ROUND(AVG(dv.phase_a_current_6th), 2), 0.001) AS phase_a_current_6th,
			      IFNULL(ROUND(AVG(dv.phase_a_current_7th), 2), 0.001) AS phase_a_current_7th,
			      IFNULL(ROUND(AVG(dv.phase_a_voltage_0th), 2), 0.001) AS phase_a_voltage_0th,
			      IFNULL(ROUND(AVG(dv.phase_a_voltage_1st), 2), 0.001) AS phase_a_voltage_1st,
			      IFNULL(ROUND(AVG(dv.phase_a_voltage_2nd), 2), 0.001) AS phase_a_voltage_2nd,
			      IFNULL(ROUND(AVG(dv.phase_a_voltage_3rd), 2), 0.001) AS phase_a_voltage_3rd,
			      IFNULL(ROUND(AVG(dv.phase_b_current_0th), 2), 0.001) AS phase_b_current_0th,
			      IFNULL(ROUND(AVG(dv.phase_b_current_1st), 2), 0.001) AS phase_b_current_1st,
			      IFNULL(ROUND(AVG(dv.phase_b_current_2nd), 2), 0.001) AS phase_b_current_2nd,
			      IFNULL(ROUND(AVG(dv.phase_b_current_3rd), 2), 0.001) AS phase_b_current_3rd,
			      IFNULL(ROUND(AVG(dv.phase_b_current_4th), 2), 0.001) AS phase_b_current_4th,
			      IFNULL(ROUND(AVG(dv.phase_b_current_5th), 2), 0.001) AS phase_b_current_5th,
			      IFNULL(ROUND(AVG(dv.phase_b_current_6th), 2), 0.001) AS phase_b_current_6th,
			      IFNULL(ROUND(AVG(dv.phase_b_current_7th), 2), 0.001) AS phase_b_current_7th,
			      IFNULL(ROUND(AVG(dv.phase_b_voltage_0th), 2), 0.001) AS phase_b_voltage_0th,
			      IFNULL(ROUND(AVG(dv.phase_b_voltage_0th), 2), 0.001) AS phase_b_voltage_0th,
			      IFNULL(ROUND(AVG(dv.phase_b_voltage_2nd), 2), 0.001) AS phase_b_voltage_2nd,
			      IFNULL(ROUND(AVG(dv.phase_b_voltage_3rd), 2), 0.001) AS phase_b_voltage_3rd,
			      IFNULL(ROUND(AVG(dv.phase_c_current_0th), 2), 0.001) AS phase_c_current_0th,
			      IFNULL(ROUND(AVG(dv.phase_c_current_1st), 2), 0.001) AS phase_c_current_1st,
			      IFNULL(ROUND(AVG(dv.phase_c_current_2nd), 2), 0.001) AS phase_c_current_2nd,
			      IFNULL(ROUND(AVG(dv.phase_c_current_3rd), 2), 0.001) AS phase_c_current_3rd,
			      IFNULL(ROUND(AVG(dv.phase_c_current_4th), 2), 0.001) AS phase_c_current_4th,
			      IFNULL(ROUND(AVG(dv.phase_c_current_5th), 2), 0.001) AS phase_c_current_5th,
			      IFNULL(ROUND(AVG(dv.phase_c_current_6th), 2), 0.001) AS phase_c_current_6th,
			      IFNULL(ROUND(AVG(dv.phase_c_current_7th), 2), 0.001) AS phase_c_current_7th,
			      IFNULL(ROUND(AVG(dv.phase_c_voltage_0th), 2), 0.001) AS phase_c_voltage_0th,
			      IFNULL(ROUND(AVG(dv.phase_c_voltage_1st), 2), 0.001) AS phase_c_voltage_1st,
			      IFNULL(ROUND(AVG(dv.phase_c_voltage_2nd), 2), 0.001) AS phase_c_voltage_2nd,
			      IFNULL(ROUND(AVG(dv.phase_c_voltage_3rd), 2), 0.001) AS phase_c_voltage_3rd,
			      IFNULL(ROUND(AVG(dv.angle_phase_a_current), 2), 0.001) AS angle_phase_a_current,
			      IFNULL(ROUND(AVG(dv.angle_phase_b_current), 2), 0.001) AS angle_phase_b_current,
			      IFNULL(ROUND(AVG(dv.angle_phase_c_current), 2), 0.001) AS angle_phase_c_current,
			      IFNULL(ROUND(AVG(dv.angle_volts_a_b), 2), 0.001) AS angle_volts_a_b,
			      IFNULL(ROUND(AVG(dv.angle_volts_b_c), 2), 0.001) AS angle_volts_b_c,
			      IFNULL(ROUND(AVG(dv.angle_volts_c_a), 2), 0.001) AS angle_volts_c_a,
			</if>
			<if test="table_name == 'model_kippzonen_rt1_class8009'">
				  
				  IFNULL(ROUND(IF(AVG(dv.sensor1_data) <![CDATA[<]]> 0, 0, AVG(dv.sensor1_data)), 2), 0.001) AS sensor1_data,
				  
			      IFNULL(ROUND(AVG(dv.panel_temperature), 2), 0.001) AS panel_temperature,
			      IFNULL(ROUND(AVG(dv.external_power_sensor), 2), 0.001) AS external_power_sensor,
			      IFNULL(ROUND(COUNT(dv.error_code), 2), 0.001) AS error_code,
			</if>
			<if test="table_name == 'model_ivt_solaron_ext'">
				  IFNULL(ROUND(AVG(dv.today_kwh), 2), 0.001) AS today_kwh,
			      IFNULL(ROUND(AVG(dv.ytd_kwh_total), 2), 0.001) AS ytd_kwh_total,
			      IFNULL(ROUND(AVG(dv.life_kwh_total), 2), 0.001) AS life_kwh_total,
			      IFNULL(ROUND(AVG(dv.ytd_kwh), 2), 0.001) AS ytd_kwh,
			      IFNULL(ROUND(AVG(dv.life_kwh), 2), 0.001) AS life_kwh,
			      IFNULL(ROUND(AVG(dv.last_15min_kwh), 2), 0.001) AS last_15min_kwh,

			      IFNULL(ROUND(IF(AVG(dv.ac_power) <![CDATA[<]]> 0, 0, AVG(dv.ac_power)), 2), 0.001) AS ac_power,
			      
			      IFNULL(ROUND(AVG(dv.ac_frequency), 2), 0.001) AS ac_frequency,
			      IFNULL(ROUND(AVG(dv.pv_voltage), 2), 0.001) AS pv_voltage,
			      IFNULL(ROUND(AVG(dv.pv_current), 2), 0.001) AS pv_current,
			      IFNULL(ROUND(AVG(dv.common_mode), 2), 0.001) AS common_mode,
			      IFNULL(ROUND(AVG(dv.coolant_temperature), 2), 0.001) AS coolant_temperature,
			      IFNULL(ROUND(AVG(dv.reactor_temperature), 2), 0.001) AS reactor_temperature,
			      IFNULL(ROUND(AVG(dv.cabinet_temperature), 2), 0.001) AS cabinet_temperature,
			      IFNULL(ROUND(AVG(dv.bus_voltage), 2), 0.001) AS bus_voltage,
			      IFNULL(ROUND(AVG(dv.ground_current), 2), 0.001) AS ground_current,
			      IFNULL(ROUND(AVG(dv.reactive_power), 2), 0.001) AS reactive_power,
			      IFNULL(ROUND(COUNT(dv.active_faults1), 2), 0.001) AS active_faults1,
			      IFNULL(ROUND(COUNT(dv.active_faults2), 2), 0.001) AS active_faults2,
			      IFNULL(ROUND(COUNT(dv.active_faults3), 2), 0.001) AS active_faults3,
			      IFNULL(ROUND(COUNT(dv.warnings1), 2), 0.001) AS warnings1,
			      IFNULL(ROUND(COUNT(dv.warnings2_reserved), 2), 0.001) AS warnings2_reserved,
			      IFNULL(ROUND(COUNT(dv.warnings3_reserved), 2), 0.001) AS warnings3_reserved,
			      IFNULL(ROUND(AVG(dv.ac_current), 2), 0.001) AS ac_current,
			</if>
			<if test="(datatablename == 'model_pvmet_100') || (datatablename == 'ViewModelPVMet100')">
				  
				  IFNULL(ROUND(IF(AVG(dv.TransientHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(dv.TransientHorizontalIrradiance)), 2), 0.001) AS TransientHorizontalIrradiance,
				  IFNULL(ROUND(IF(AVG(dv.DailyHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(dv.DailyHorizontalIrradiance)), 2), 0.001) AS DailyHorizontalIrradiance,
				  
			      IFNULL(ROUND(AVG(dv.AmbientTemperature), 2), 0.001) AS AmbientTemperature,
			      IFNULL(ROUND(AVG(dv.Temperature), 2), 0.001) AS Temperature_PV_Module,
			      IFNULL(ROUND(AVG(dv.WindAngle), 2), 0.001) AS WindAngle,
			      IFNULL(ROUND(AVG(dv.WindSpeed), 2), 0.001) AS WindSpeed,
			</if>
			<if test="(datatablename == 'model_pvp_inverter') || (datatablename == 'ViewModelPvpInverter')">
				  IFNULL(ROUND(AVG(dv.total_kwh_delivered), 2), 0.001) AS total_kwh_delivered,
			      IFNULL(ROUND(AVG(dv.volts_a_l_n), 2), 0.001) AS volts_a_l_n,
			      IFNULL(ROUND(AVG(dv.volts_b_l_n), 2), 0.001) AS volts_b_l_n,
			      IFNULL(ROUND(AVG(dv.volts_c_l_n), 2), 0.001) AS volts_c_l_n,
			      IFNULL(ROUND(AVG(dv.current_a), 2), 0.001) AS current_a,
			      IFNULL(ROUND(AVG(dv.current_b), 2), 0.001) AS current_b,
			      IFNULL(ROUND(AVG(dv.current_c), 2), 0.001) AS current_c,
			      IFNULL(ROUND(AVG(dv.dc_output_voltage), 2), 0.001) AS dc_output_voltage,
			      IFNULL(ROUND(AVG(dv.dc_output_current), 2), 0.001) AS dc_output_current,
			      IFNULL(ROUND(AVG(dv.line_frenquency), 2), 0.001) AS line_frenquency,
			      
			      IFNULL(ROUND(IF(AVG(dv.line_kw) <![CDATA[<]]> 0, 0, AVG(dv.line_kw)), 2), 0.001) AS line_kw,
			      
			      IFNULL(ROUND(COUNT(dv.inverter_fault_word0), 2), 0.001) AS inverter_fault_word0,
			      IFNULL(ROUND(COUNT(dv.inverter_fault_word1), 2), 0.001) AS inverter_fault_word1,
			      IFNULL(ROUND(COUNT(dv.inverter_fault_word2), 2), 0.001) AS inverter_fault_word2,
			</if>
			<if test="table_name == 'model_imtsolar_class8000'">
				
				IFNULL(ROUND(IF(AVG(dv.irradiance) <![CDATA[<]]> 0, 0, AVG(dv.irradiance)), 2), 0.001) AS irradiance,
				
		      	IFNULL(ROUND(AVG(dv.tcell), 2), 0.001) AS tcell,
			</if>
			<if test="table_name == 'model_advanced_energy_solaron'">
				  IFNULL(ROUND(AVG(dv.today_kwh), 2), 0.001) AS today_kwh,
			      IFNULL(ROUND(AVG(dv.ytd_kwh_total), 2), 0.001) AS ytd_kwh_total,
			      IFNULL(ROUND(AVG(dv.life_kwh_total), 2), 0.001) AS life_kwh_total,
			      IFNULL(ROUND(AVG(dv.ytd_kwh), 2), 0.001) AS ytd_kwh,
			      IFNULL(ROUND(AVG(dv.life_kwh), 2), 0.001) AS life_kwh,
			      IFNULL(ROUND(AVG(dv.last_15min_kwh), 2), 0.001) AS last_15min_kwh,
			      
			      IFNULL(ROUND(IF(AVG(dv.ac_power) <![CDATA[<]]> 0, 0, AVG(dv.ac_power)), 2), 0.001) AS ac_power,
			      
			      IFNULL(ROUND(AVG(dv.ac_frequency), 2), 0.001) AS ac_frequency,
			      IFNULL(ROUND(AVG(dv.pv_voltage), 2), 0.001) AS pv_voltage,
			      IFNULL(ROUND(AVG(dv.pv_current), 2), 0.001) AS pv_current,
			      IFNULL(ROUND(AVG(dv.ambient_temperature), 2), 0.001) AS ambient_temperature,
			      IFNULL(ROUND(AVG(dv.coolant_temperature), 2), 0.001) AS coolant_temperature,
			      IFNULL(ROUND(AVG(dv.reactor_temperature), 2), 0.001) AS reactor_temperature,
			      IFNULL(ROUND(AVG(dv.cabinet_temperature), 2), 0.001) AS cabinet_temperature,
			      IFNULL(ROUND(AVG(dv.bus_voltage), 2), 0.001) AS bus_voltage,
			      IFNULL(ROUND(AVG(dv.ground_current), 2), 0.001) AS ground_current,
			      IFNULL(ROUND(AVG(dv.reactive_power), 2), 0.001) AS reactive_power,
			      IFNULL(ROUND(COUNT(dv.active_faults1), 2), 0.001) AS active_faults1,
			      IFNULL(ROUND(COUNT(dv.active_faults2), 2), 0.001) AS active_faults2,
			      IFNULL(ROUND(COUNT(dv.active_faults3), 2), 0.001) AS active_faults3,
			      IFNULL(ROUND(COUNT(dv.warnings1), 2), 0.001) AS warnings1,
			      IFNULL(ROUND(COUNT(dv.warnings2_reserved), 2), 0.001) AS warnings2_reserved,
			      IFNULL(ROUND(COUNT(dv.warnings3_reserved), 2), 0.001) AS warnings3_reserved,
			</if>
			<if test="table_name == 'model_rt1_class30000'">
				  IFNULL(ROUND(IF(AVG(dv.sensor1_data) <![CDATA[<]]> 0, 0, AVG(dv.sensor1_data  )), 2), 0.001) AS sensor1_data,
				  
			      IFNULL(ROUND(AVG(dv.panel_temperature), 2), 0.001) AS panel_temperature,
			      IFNULL(ROUND(AVG(dv.external_power_sensor), 2), 0.001) AS external_power_sensor,
			      IFNULL(ROUND(COUNT(dv.error_code), 2), 0.001) AS error_code,
			</if>
			
			
			<if test="table_name == 'model_veris_industries_e51c2_power_meter'">
				  IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyNet), 2), 0.001) AS AccumulatedRealEnergyNet,
			      IFNULL(ROUND(AVG(dv.RealEnergyQuadrants14Import), 2), 0.001) AS RealEnergyQuadrants14Import,
			      IFNULL(ROUND(AVG(dv.RealEnergyQuadrants23Export), 2), 0.001) AS RealEnergyQuadrants23Export,
			      IFNULL(ROUND(AVG(dv.ReactiveEnergyQuadrant1), 2), 0.001) AS ReactiveEnergyQuadrant1,
			      IFNULL(ROUND(AVG(dv.ReactiveEnergyQuadrant2), 2), 0.001) AS ReactiveEnergyQuadrant2,
			      IFNULL(ROUND(AVG(dv.ReactiveEnergyQuadrant3), 2), 0.001) AS ReactiveEnergyQuadrant3,
			      IFNULL(ROUND(AVG(dv.ReactiveEnergyQuadrant4), 2), 0.001) AS ReactiveEnergyQuadrant4,
			      IFNULL(ROUND(AVG(dv.ApparentEnergyNet), 2), 0.001) AS ApparentEnergyNet,
			      IFNULL(ROUND(AVG(dv.ApparentEnergyQuadrants14), 2), 0.001) AS ApparentEnergyQuadrants14,
			      IFNULL(ROUND(AVG(dv.ApparentEnergyQuadrants23), 2), 0.001) AS ApparentEnergyQuadrants23,
			      IFNULL(ROUND(AVG(dv.TotalNetInstantaneousRealPower), 2), 0.001) AS TotalNetInstantaneousRealPower,
			      IFNULL(ROUND(AVG(dv.TotalNetInstantaneousReactivePower), 2), 0.001) AS TotalNetInstantaneousReactivePower,
			      IFNULL(ROUND(AVG(dv.TotalNetInstantaneousApparentPower), 2), 0.001) AS TotalNetInstantaneousApparentPower,
			      IFNULL(ROUND(AVG(dv.TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
			      IFNULL(ROUND(AVG(dv.VoltageLL3pAve), 2), 0.001) AS VoltageLL3pAve,
			      IFNULL(ROUND(AVG(dv.VoltageLN3pAve), 2), 0.001) AS VoltageLN3pAve,
			      IFNULL(ROUND(AVG(dv.Current3pAve), 2), 0.001) AS Current3pAve,
			      IFNULL(ROUND(AVG(dv.Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(IF(AVG(dv.TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPowerPresentDemand)), 2), 0.001) AS TotalRealPowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalReactivePowerPresentDemand), 2), 0.001) AS TotalReactivePowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalApparentPowerPresentDemand), 2), 0.001) AS TotalApparentPowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalRealPowerMaxDemandImport), 2), 0.001) AS TotalRealPowerMaxDemandImport,
			      IFNULL(ROUND(AVG(dv.TotalReactivePowerMaxDemandImport), 2), 0.001) AS TotalReactivePowerMaxDemandImport,
			      IFNULL(ROUND(AVG(dv.TotalApparentPowerMaxDemandImport), 2), 0.001) AS TotalApparentPowerMaxDemandImport,
			      IFNULL(ROUND(AVG(dv.TotalRealPowerMaxDemandExport), 2), 0.001) AS TotalRealPowerMaxDemandExport,
			      IFNULL(ROUND(AVG(dv.TotalReactivePowerMaxDemandExport), 2), 0.001) AS TotalReactivePowerMaxDemandExport,
			      IFNULL(ROUND(AVG(dv.TotalApparentPowerMaxDemandExport), 2), 0.001) AS TotalApparentPowerMaxDemandExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseAImport), 2), 0.001) AS AccumulatedRealEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseBImport), 2), 0.001) AS AccumulatedRealEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseCImport), 2), 0.001) AS AccumulatedRealEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseAExport), 2), 0.001) AS AccumulatedRealEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseBExport), 2), 0.001) AS AccumulatedRealEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedRealEnergyPhaseCExport), 2), 0.001) AS AccumulatedRealEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseAImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseBImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseCImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseAExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseBExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(dv.AccumulatedApparentEnergyPhaseCExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseA), 2), 0.001) AS RealPowerPhaseA,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseB), 2), 0.001) AS RealPowerPhaseB,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseC), 2), 0.001) AS RealPowerPhaseC,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseA), 2), 0.001) AS ReactivePowerPhaseA,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseB), 2), 0.001) AS ReactivePowerPhaseB,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseC), 2), 0.001) AS ReactivePowerPhaseC,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseA), 2), 0.001) AS ApparentPowerPhaseA,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseB), 2), 0.001) AS ApparentPowerPhaseB,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseC), 2), 0.001) AS ApparentPowerPhaseC,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseA), 2), 0.001) AS PowerFactorPhaseA,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseB), 2), 0.001) AS PowerFactorPhaseB,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseC), 2), 0.001) AS PowerFactorPhaseC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAB), 2), 0.001) AS VoltagePhaseAB,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseBC), 2), 0.001) AS VoltagePhaseBC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAC), 2), 0.001) AS VoltagePhaseAC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAN), 2), 0.001) AS VoltagePhaseAN,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseBN), 2), 0.001) AS VoltagePhaseBN,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseCN), 2), 0.001) AS VoltagePhaseCN,
			      IFNULL(ROUND(AVG(dv.CurrentPhaseA), 2), 0.001) AS CurrentPhaseA,
			      IFNULL(ROUND(AVG(dv.CurrentPhaseB), 2), 0.001) AS CurrentPhaseB,
			      IFNULL(ROUND(AVG(dv.CurrentPhaseC), 2), 0.001) AS CurrentPhaseC,
			</if>
			<if test="table_name == 'model_veris_industries_e50c2a'">
				  IFNULL(ROUND(AVG(dv.RealEnergyConsumption), 2), 0.001) AS RealEnergyConsumption,
			      IFNULL(ROUND(AVG(dv.TotalInstantaneousRealPower), 2), 0.001) AS TotalInstantaneousRealPower,
			      IFNULL(ROUND(AVG(dv.TotalInstantaneousReactivePower), 2), 0.001) AS TotalInstantaneousReactivePower,
			      IFNULL(ROUND(AVG(dv.TotalInstantaneousApparentPower), 2), 0.001) AS TotalInstantaneousApparentPower,
			      IFNULL(ROUND(AVG(dv.TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
			      IFNULL(ROUND(AVG(dv.VoltageLL3pAve), 2), 0.001) AS VoltageLL3pAve,
			      IFNULL(ROUND(AVG(dv.VoltageLN3pAve), 2), 0.001) AS VoltageLN3pAve,
			      IFNULL(ROUND(AVG(dv.Current3pAve), 2), 0.001) AS Current3pAve,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseA), 2), 0.001) AS RealPowerPhaseA,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseB), 2), 0.001) AS RealPowerPhaseB,
			      IFNULL(ROUND(AVG(dv.RealPowerPhaseC), 2), 0.001) AS RealPowerPhaseC,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseA), 2), 0.001) AS PowerFactorPhaseA,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseB), 2), 0.001) AS PowerFactorPhaseB,
			      IFNULL(ROUND(AVG(dv.PowerFactorPhaseC), 2), 0.001) AS PowerFactorPhaseC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAB), 2), 0.001) AS VoltagePhaseAB,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseBC), 2), 0.001) AS VoltagePhaseBC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAC), 2), 0.001) AS VoltagePhaseAC,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseAN), 2), 0.001) AS VoltagePhaseAN,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseBN), 2), 0.001) AS VoltagePhaseBN,
			      IFNULL(ROUND(AVG(dv.VoltagePhaseCN), 2), 0.001) AS VoltagePhaseCN,
			      IFNULL(ROUND(AVG(dv.CurrentInstantaneousPhaseA), 2), 0.001) AS CurrentInstantaneousPhaseA,
			      IFNULL(ROUND(AVG(dv.CurrentInstantaneousPhaseB), 2), 0.001) AS CurrentInstantaneousPhaseB,
			      IFNULL(ROUND(AVG(dv.CurrentInstantaneousPhaseC), 2), 0.001) AS CurrentInstantaneousPhaseC,
			      IFNULL(ROUND(AVG(dv.Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(dv.ApparentEnergyConsumption), 2), 0.001) AS ApparentEnergyConsumption,
			      IFNULL(ROUND(AVG(dv.ReactiveEnergyConsumption), 2), 0.001) AS ReactiveEnergyConsumption,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseA), 2), 0.001) AS ApparentPowerPhaseA,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseB), 2), 0.001) AS ApparentPowerPhaseB,
			      IFNULL(ROUND(AVG(dv.ApparentPowerPhaseC), 2), 0.001) AS ApparentPowerPhaseC,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseA), 2), 0.001) AS ReactivePowerPhaseA,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseB), 2), 0.001) AS ReactivePowerPhaseB,
			      IFNULL(ROUND(AVG(dv.ReactivePowerPhaseC), 2), 0.001) AS ReactivePowerPhaseC,
			      IFNULL(ROUND(IF(AVG(dv.TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPowerPresentDemand)), 2), 0.001) AS TotalRealPowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalReactivePowerPresentDemand), 2), 0.001) AS TotalReactivePowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalApparentPowerPresentDemand), 2), 0.001) AS TotalApparentPowerPresentDemand,
			      IFNULL(ROUND(AVG(dv.TotalRealPowerMaxDemand), 2), 0.001) AS TotalRealPowerMaxDemand,
			      IFNULL(ROUND(AVG(dv.TotalReactivePowerMaxDemand), 2), 0.001) AS TotalReactivePowerMaxDemand,
			</if>
			<if test="table_name == 'model_satcon_pvs357_inverter'">
				  IFNULL(ROUND(AVG(dv.Software_Identification_Number), 2), 0.001) AS Software_Identification_Number,
			      IFNULL(ROUND(AVG(dv.Fault_Word1), 2), 0.001) AS Fault_Word1,
			      IFNULL(ROUND(AVG(dv.Fault_Word2), 2), 0.001) AS Fault_Word2,
			      IFNULL(ROUND(AVG(dv.Fault_Word3), 2), 0.001) AS Fault_Word3,
			      IFNULL(ROUND(AVG(dv.Fault_Word4), 2), 0.001) AS Fault_Word4,
			      IFNULL(ROUND(AVG(dv.Fault_Word5), 2), 0.001) AS Fault_Word5,
			      IFNULL(ROUND(AVG(dv.Fault_Word6), 2), 0.001) AS Fault_Word6,
			      IFNULL(ROUND(AVG(dv.Fault_Word7), 2), 0.001) AS Fault_Word7,
			      IFNULL(ROUND(AVG(dv.Number_of_Faults), 2), 0.001) AS Number_of_Faults,
			      IFNULL(ROUND(AVG(dv.Program_Checksum), 2), 0.001) AS Program_Checksum,
			      IFNULL(ROUND(AVG(dv.DC_Input_Volts), 2), 0.001) AS DC_Input_Volts,
			      IFNULL(ROUND(AVG(dv.DC_Link_Volts), 2), 0.001) AS DC_Link_Volts,
			      IFNULL(ROUND(AVG(dv.DC_Link_Amps), 2), 0.001) AS DC_Link_Amps,
			      IFNULL(ROUND(AVG(dv.DC_Ground_Current), 2), 0.001) AS DC_Ground_Current,
			      IFNULL(ROUND(AVG(dv.Line_Amps_A), 2), 0.001) AS Line_Amps_A,
			      IFNULL(ROUND(AVG(dv.Line_Amps_B), 2), 0.001) AS Line_Amps_B,
			      IFNULL(ROUND(AVG(dv.Line_Amps_C), 2), 0.001) AS Line_Amps_C,
			      IFNULL(ROUND(AVG(dv.Line_Amps_Average), 2), 0.001) AS Line_Amps_Average,
			      IFNULL(ROUND(AVG(dv.Neutral_Current), 2), 0.001) AS Neutral_Current,
			      IFNULL(ROUND(AVG(dv.Line_Volts_A), 2), 0.001) AS Line_Volts_A,
			      IFNULL(ROUND(AVG(dv.Line_Volts_B), 2), 0.001) AS Line_Volts_B,
			      IFNULL(ROUND(AVG(dv.Line_Volts_C), 2), 0.001) AS Line_Volts_C,
			      IFNULL(ROUND(AVG(dv.Line_Volts_Average), 2), 0.001) AS Line_Volts_Average,
			      IFNULL(ROUND(AVG(dv.Line_Voltage_Unbalance), 2), 0.001) AS Line_Voltage_Unbalance,
			      IFNULL(ROUND(AVG(dv.Line_Current_Unbalance), 2), 0.001) AS Line_Current_Unbalance,
			      IFNULL(ROUND(AVG(dv.Input_kW), 2), 0.001) AS Input_kW,
			      
			      IFNULL(ROUND(IF(AVG(dv.Output_kw) <![CDATA[<]]> 0, 0, AVG(dv.Output_kw)), 2), 0.001) AS Output_kw,
			      
			      IFNULL(ROUND(AVG(dv.Output_kvar), 2), 0.001) AS Output_kvar,
			      IFNULL(ROUND(AVG(dv.Output_kva), 2), 0.001) AS Output_kva,
			      IFNULL(ROUND(AVG(dv.Power_Factor), 2), 0.001) AS Power_Factor,
			      IFNULL(ROUND(AVG(dv.Ground_Impedance), 2), 0.001) AS Ground_Impedance,
			      IFNULL(ROUND(AVG(dv.String_Amps1), 2), 0.001) AS String_Amps1,
			      IFNULL(ROUND(AVG(dv.String_Amps2), 2), 0.001) AS String_Amps2,
			      IFNULL(ROUND(AVG(dv.String_Amps3), 2), 0.001) AS String_Amps3,
			      IFNULL(ROUND(AVG(dv.String_Amps4), 2), 0.001) AS String_Amps4,
			      IFNULL(ROUND(AVG(dv.String_Amps5), 2), 0.001) AS String_Amps5,
			      IFNULL(ROUND(AVG(dv.String_Amps6), 2), 0.001) AS String_Amps6,
			      IFNULL(ROUND(AVG(dv.String_Amps7), 2), 0.001) AS String_Amps7,
			      IFNULL(ROUND(AVG(dv.String_Amps8), 2), 0.001) AS String_Amps8,
			      IFNULL(ROUND(AVG(dv.String_Amps9), 2), 0.001) AS String_Amps9,
			      IFNULL(ROUND(AVG(dv.String_Amps10), 2), 0.001) AS String_Amps10,
			      IFNULL(ROUND(AVG(dv.String_Amps11), 2), 0.001) AS String_Amps11,
			      IFNULL(ROUND(AVG(dv.String_Amps12), 2), 0.001) AS String_Amps12,
			      IFNULL(ROUND(AVG(dv.String_Amps13), 2), 0.001) AS String_Amps13,
			      IFNULL(ROUND(AVG(dv.String_Amps14), 2), 0.001) AS String_Amps14,
			      IFNULL(ROUND(AVG(dv.String_Amps15), 2), 0.001) AS String_Amps15,
			      IFNULL(ROUND(AVG(dv.String_Amps16), 2), 0.001) AS String_Amps16,
			      IFNULL(ROUND(AVG(dv.String_Amps17), 2), 0.001) AS String_Amps17,
			      IFNULL(ROUND(AVG(dv.String_Amps18), 2), 0.001) AS String_Amps18,
			      IFNULL(ROUND(AVG(dv.String_Amps19), 2), 0.001) AS String_Amps19,
			      IFNULL(ROUND(AVG(dv.String_Amps20), 2), 0.001) AS String_Amps20,
			      IFNULL(ROUND(AVG(dv.String_Amps21), 2), 0.001) AS String_Amps21,
			      IFNULL(ROUND(AVG(dv.String_Amps22), 2), 0.001) AS String_Amps22,
			      IFNULL(ROUND(AVG(dv.String_Amps23), 2), 0.001) AS String_Amps23,
			      IFNULL(ROUND(AVG(dv.String_Amps24), 2), 0.001) AS String_Amps24,
			      IFNULL(ROUND(AVG(dv.String_Amps25), 2), 0.001) AS String_Amps25,
			      IFNULL(ROUND(AVG(dv.String_Amps26), 2), 0.001) AS String_Amps26,
			      IFNULL(ROUND(AVG(dv.String_Amps27), 2), 0.001) AS String_Amps27,
			      IFNULL(ROUND(AVG(dv.String_Amps28), 2), 0.001) AS String_Amps28,
			      IFNULL(ROUND(AVG(dv.String_Amps29), 2), 0.001) AS String_Amps29,
			      IFNULL(ROUND(AVG(dv.String_Amps30), 2), 0.001) AS String_Amps30,
			      IFNULL(ROUND(AVG(dv.String_Amps31), 2), 0.001) AS String_Amps31,
			      IFNULL(ROUND(AVG(dv.String_Amps32), 2), 0.001) AS String_Amps32,
			      
			      
			      IFNULL(ROUND(AVG(dv.String_Amps_Average), 2), 0.001) AS String_Amps_Average,
			      IFNULL(ROUND(AVG(dv.String_kwh1), 2), 0.001) AS String_kwh1,
			      IFNULL(ROUND(AVG(dv.String_kwh2), 2), 0.001) AS String_kwh2,
			      IFNULL(ROUND(AVG(dv.String_kwh3), 2), 0.001) AS String_kwh3,
			      IFNULL(ROUND(AVG(dv.String_kwh4), 2), 0.001) AS String_kwh4,
			      IFNULL(ROUND(AVG(dv.String_kwh5), 2), 0.001) AS String_kwh5,
			      IFNULL(ROUND(AVG(dv.String_kwh6), 2), 0.001) AS String_kwh6,
			      IFNULL(ROUND(AVG(dv.String_kwh7), 2), 0.001) AS String_kwh7,
			      IFNULL(ROUND(AVG(dv.String_kwh8), 2), 0.001) AS String_kwh8,
			      IFNULL(ROUND(AVG(dv.String_kwh9), 2), 0.001) AS String_kwh9,
			      IFNULL(ROUND(AVG(dv.String_kwh10), 2), 0.001) AS String_kwh10,
			      IFNULL(ROUND(AVG(dv.String_kwh11), 2), 0.001) AS String_kwh11,
			      IFNULL(ROUND(AVG(dv.String_kwh12), 2), 0.001) AS String_kwh12,
			      IFNULL(ROUND(AVG(dv.String_kwh13), 2), 0.001) AS String_kwh13,
			      IFNULL(ROUND(AVG(dv.String_kwh14), 2), 0.001) AS String_kwh14,
			      IFNULL(ROUND(AVG(dv.String_kwh15), 2), 0.001) AS String_kwh15,
			      IFNULL(ROUND(AVG(dv.String_kwh16), 2), 0.001) AS String_kwh16,
			      IFNULL(ROUND(AVG(dv.String_kwh17), 2), 0.001) AS String_kwh17,
			      IFNULL(ROUND(AVG(dv.String_kwh18), 2), 0.001) AS String_kwh18,
			      IFNULL(ROUND(AVG(dv.String_kwh19), 2), 0.001) AS String_kwh19,
			      IFNULL(ROUND(AVG(dv.String_kwh20), 2), 0.001) AS String_kwh20,
			      IFNULL(ROUND(AVG(dv.String_kwh21), 2), 0.001) AS String_kwh21,
			      IFNULL(ROUND(AVG(dv.String_kwh22), 2), 0.001) AS String_kwh22,
			      IFNULL(ROUND(AVG(dv.String_kwh23), 2), 0.001) AS String_kwh23,
			      IFNULL(ROUND(AVG(dv.String_kwh24), 2), 0.001) AS String_kwh24,
			      IFNULL(ROUND(AVG(dv.String_kwh25), 2), 0.001) AS String_kwh25,
			      IFNULL(ROUND(AVG(dv.String_kwh26), 2), 0.001) AS String_kwh26,
			      IFNULL(ROUND(AVG(dv.String_kwh27), 2), 0.001) AS String_kwh27,
			      IFNULL(ROUND(AVG(dv.String_kwh28), 2), 0.001) AS String_kwh28,
			      IFNULL(ROUND(AVG(dv.String_kwh29), 2), 0.001) AS String_kwh29,
			      IFNULL(ROUND(AVG(dv.String_kwh30), 2), 0.001) AS String_kwh30,
			      IFNULL(ROUND(AVG(dv.String_kwh31), 2), 0.001) AS String_kwh31,
			      IFNULL(ROUND(AVG(dv.String_kwh32), 2), 0.001) AS String_kwh32,
			      
			      IFNULL(ROUND(AVG(dv.String_kwh_Average), 2), 0.001) AS String_kwh_Average,
			      IFNULL(ROUND(AVG(dv.Total_kwh), 2), 0.001) AS Total_kwh,
			      IFNULL(ROUND(AVG(dv.Total_mwh), 2), 0.001) AS Total_mwh,
			      IFNULL(ROUND(AVG(dv.kwh_Today), 2), 0.001) AS kwh_Today,
			      IFNULL(ROUND(AVG(dv.kwh_Yesterday), 2), 0.001) AS kwh_Yesterday,
			      IFNULL(ROUND(AVG(dv.Total_kwh7_days), 2), 0.001) AS Total_kwh7_days,
			      IFNULL(ROUND(AVG(dv.Total_kwh30_days), 2), 0.001) AS Total_kwh30_days,
			      IFNULL(ROUND(AVG(dv.Average_kwh7_days), 2), 0.001) AS Average_kwh7_days,
			      IFNULL(ROUND(AVG(dv.Average_kwh30_Days), 2), 0.001) AS Average_kwh30_Days,
			      IFNULL(ROUND(AVG(dv.Average_Line_Frequency), 2), 0.001) AS Average_Line_Frequency,
			      IFNULL(ROUND(AVG(dv.Average_Line_Frequency_Error), 2), 0.001) AS Average_Line_Frequency_Error,
			      IFNULL(ROUND(AVG(dv.FPGA_Identification_Number), 2), 0.001) AS FPGA_Identification_Number,
			      IFNULL(ROUND(AVG(dv.DC_Input_Voltage_Timer), 2), 0.001) AS DC_Input_Voltage_Timer,
			      IFNULL(ROUND(AVG(dv.AC_Line_Voltage_Timer), 2), 0.001) AS AC_Line_Voltage_Timer,
			      IFNULL(ROUND(AVG(dv.Operating_State), 2), 0.001) AS Operating_State,
			      IFNULL(ROUND(AVG(dv.Internal_Air_Temperature), 2), 0.001) AS Internal_Air_Temperature,
			      IFNULL(ROUND(AVG(dv.Inverter_Air_Temperature), 2), 0.001) AS Inverter_Air_Temperature,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature1), 2), 0.001) AS Heatsink_Temperature1,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature2), 2), 0.001) AS Heatsink_Temperature2,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature3), 2), 0.001) AS Heatsink_Temperature3,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature4), 2), 0.001) AS Heatsink_Temperature4,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature5), 2), 0.001) AS Heatsink_Temperature5,
			      IFNULL(ROUND(AVG(dv.Heatsink_Temperature6), 2), 0.001) AS Heatsink_Temperature6,
			      IFNULL(ROUND(AVG(dv.Heatsink_Maximum_Temparature1), 2), 0.001) AS Heatsink_Maximum_Temparature1,
			      IFNULL(ROUND(AVG(dv.Fan_Speed_Command1), 2), 0.001) AS Fan_Speed_Command1,
			      IFNULL(ROUND(AVG(dv.Heatsink_Maximum_Temperature2), 2), 0.001) AS Heatsink_Maximum_Temperature2,
			      IFNULL(ROUND(AVG(dv.Fan_Speed_Command2), 2), 0.001) AS Fan_Speed_Command2,
			      IFNULL(ROUND(AVG(dv.Number_of_Temperature_Feedbacks), 2), 0.001) AS Number_of_Temperature_Feedbacks,
			      IFNULL(ROUND(AVG(dv.Serial_number_word1), 2), 0.001) AS Serial_number_word1,
			      IFNULL(ROUND(AVG(dv.Serial_number_word2), 2), 0.001) AS Serial_number_word2,
			      IFNULL(ROUND(AVG(dv.Serial_number_word3), 2), 0.001) AS Serial_number_word3,
			      IFNULL(ROUND(AVG(dv.Serial_number_word4), 2), 0.001) AS Serial_number_word4,
			      IFNULL(ROUND(AVG(dv.Number_of_Strings), 2), 0.001) AS Number_of_Strings,
			</if>
			<if test="table_name == 'model_elkor_wattson_pv_meter'">
				  IFNULL(ROUND(AVG(dv.TotalEnergyConsumption), 2), 0.001) AS TotalEnergyConsumption,
			      
			      IFNULL(ROUND(IF(AVG(dv.TotalRealPower) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPower)), 2), 0.001) AS TotalRealPower,
			      
			      IFNULL(ROUND(AVG(dv.TotalReactivePower), 2), 0.001) AS TotalReactivePower,
			      IFNULL(ROUND(AVG(dv.TotalApparentPower), 2), 0.001) AS TotalApparentPower,
			      IFNULL(ROUND(AVG(dv.AverageVoltageLN), 2), 0.001) AS AverageVoltageLN,
			      IFNULL(ROUND(AVG(dv.AverageVoltageLL), 2), 0.001) AS AverageVoltageLL,
			      IFNULL(ROUND(AVG(dv.AverageCurrent), 2), 0.001) AS AverageCurrent,
			      IFNULL(ROUND(AVG(dv.TotalSystemPowerFactor), 2), 0.001) AS TotalSystemPowerFactor,
			      IFNULL(ROUND(AVG(dv.Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(dv.SlidingWindowRealPowerDemand), 2), 0.001) AS SlidingWindowRealPowerDemand,
			      IFNULL(ROUND(AVG(dv.VoltageAN), 2), 0.001) AS VoltageAN,
			      IFNULL(ROUND(AVG(dv.VoltageBN), 2), 0.001) AS VoltageBN,
			      IFNULL(ROUND(AVG(dv.VoltageCN), 2), 0.001) AS VoltageCN,
			      IFNULL(ROUND(AVG(dv.VoltageAB), 2), 0.001) AS VoltageAB,
			      IFNULL(ROUND(AVG(dv.VoltageBC), 2), 0.001) AS VoltageBC,
			      IFNULL(ROUND(AVG(dv.VoltageAC), 2), 0.001) AS VoltageAC,
			      IFNULL(ROUND(AVG(dv.CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(dv.CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(dv.CurrentC), 2), 0.001) AS CurrentC,
			      IFNULL(ROUND(AVG(dv.RealPowerA), 2), 0.001) AS RealPowerA,
			      IFNULL(ROUND(AVG(dv.RealPowerB), 2), 0.001) AS RealPowerB,
			      IFNULL(ROUND(AVG(dv.RealPowerC), 2), 0.001) AS RealPowerC,
			      IFNULL(ROUND(AVG(dv.ReactivePowerA), 2), 0.001) AS ReactivePowerA,
			      
			      IFNULL(ROUND(AVG(dv.ReactivePowerB), 2), 0.001) AS ReactivePowerB,
			      IFNULL(ROUND(AVG(dv.ReactivePowerC), 2), 0.001) AS ReactivePowerC,
			      IFNULL(ROUND(AVG(dv.ApparentPowerA), 2), 0.001) AS ApparentPowerA,
			      IFNULL(ROUND(AVG(dv.ApparentPowerB), 2), 0.001) AS ApparentPowerB,
			      IFNULL(ROUND(AVG(dv.ApparentPowerC), 2), 0.001) AS ApparentPowerC,
			      IFNULL(ROUND(AVG(dv.PowerFactorA), 2), 0.001) AS PowerFactorA,
			      IFNULL(ROUND(AVG(dv.PowerFactorB), 2), 0.001) AS PowerFactorB,
			      IFNULL(ROUND(AVG(dv.PowerFactorC), 2), 0.001) AS PowerFactorC,
			</if>
			<if test="table_name == 'model_w_kipp_zonen_rt1'">
				IFNULL(ROUND(AVG(dv.DeviceType), 2), 0.001) AS DeviceType,
		    	IFNULL(ROUND(AVG(dv.DataModelVersion), 2), 0.001) AS DataModelVersion,
		    	IFNULL(ROUND(AVG(dv.OperationalMode), 2), 0.001) AS OperationalMode,
		    	IFNULL(ROUND(AVG(dv.StatusFlags), 2), 0.001) AS StatusFlags,
		    	
		    	IFNULL(ROUND(IF(AVG(dv.SunPOATempComp) <![CDATA[<]]> 0, 0, AVG(dv.SunPOATempComp  )), 2), 0.001) AS SunPOATempComp,
		    	
		    	IFNULL(ROUND(AVG(dv.PanelTemperature), 2), 0.001) AS PanelTemperature,
		    	IFNULL(ROUND(AVG(dv.ExtPowerSensor), 2), 0.001) AS ExtPowerSensor,
		    	IFNULL(ROUND(AVG(dv.BatchNumber), 2), 0.001) AS BatchNumber,
		    	IFNULL(ROUND(AVG(dv.SerialNumber), 2), 0.001) AS SerialNumber,
		    	IFNULL(ROUND(AVG(dv.CalibrationDateYYMMDD), 2), 0.001) AS CalibrationDateYYMMDD,
			</if>
			<if test="table_name == 'model_elkor_production_meter'">
				
				IFNULL(ROUND(IF(AVG(dv.ActivePowerTotal) <![CDATA[<]]> 0, 0, AVG(dv.ActivePowerTotal)), 2), 0.001) AS ActivePowerTotal,
				
		    	IFNULL(ROUND(AVG(dv.ReactivePowerTotal), 2), 0.001) AS ReactivePowerTotal,
		    	IFNULL(ROUND(AVG(dv.ApparentPowerTotal), 2), 0.001) AS ApparentPowerTotal,
		    	IFNULL(ROUND(AVG(dv.VoltageAverage), 2), 0.001) AS VoltageAverage,
		    	IFNULL(ROUND(AVG(dv.VoltageLLAverage), 2), 0.001) AS VoltageLLAverage,
		    	IFNULL(ROUND(AVG(dv.CurrentAverage), 2), 0.001) AS CurrentAverage,
		    	IFNULL(ROUND(AVG(dv.SystemPowerFactor), 2), 0.001) AS SystemPowerFactor,
		    	IFNULL(ROUND(AVG(dv.SystemFrequency), 2), 0.001) AS SystemFrequency,
		    	IFNULL(ROUND(AVG(dv.VoltageAverageAngle), 2), 0.001) AS VoltageAverageAngle,
		    	IFNULL(ROUND(AVG(dv.SystemQuadrant), 2), 0.001) AS SystemQuadrant,
		    	IFNULL(ROUND(AVG(dv.VoltageA), 2), 0.001) AS VoltageA,
		    	IFNULL(ROUND(AVG(dv.VoltageB), 2), 0.001) AS VoltageB,
		    	IFNULL(ROUND(AVG(dv.VoltageC), 2), 0.001) AS VoltageC,
		    	IFNULL(ROUND(AVG(dv.VoltageAB), 2), 0.001) AS VoltageAB,
		    	IFNULL(ROUND(AVG(dv.VoltageBC), 2), 0.001) AS VoltageBC,
		    	IFNULL(ROUND(AVG(dv.VoltageAC), 2), 0.001) AS VoltageAC,
		    	IFNULL(ROUND(AVG(dv.CurrentA), 2), 0.001) AS CurrentA,
		    	IFNULL(ROUND(AVG(dv.CurrentB), 2), 0.001) AS CurrentB,
		    	IFNULL(ROUND(AVG(dv.CurrentC), 2), 0.001) AS CurrentC,
		    	IFNULL(ROUND(AVG(dv.ActivePowerA), 2), 0.001) AS ActivePowerA,
		    	IFNULL(ROUND(AVG(dv.ActivePowerB), 2), 0.001) AS ActivePowerB,
		    	IFNULL(ROUND(AVG(dv.ActivePowerC), 2), 0.001) AS ActivePowerC,
		    	IFNULL(ROUND(AVG(dv.ReactivePowerA), 2), 0.001) AS ReactivePowerA,
		    	IFNULL(ROUND(AVG(dv.ReactivePowerB), 2), 0.001) AS ReactivePowerB,
		    	IFNULL(ROUND(AVG(dv.ReactivePowerC), 2), 0.001) AS ReactivePowerC,
		    	IFNULL(ROUND(AVG(dv.ApparentPowerA), 2), 0.001) AS ApparentPowerA,
		    	IFNULL(ROUND(AVG(dv.ApparentPowerB), 2), 0.001) AS ApparentPowerB,
		    	IFNULL(ROUND(AVG(dv.ApparentPowerC), 2), 0.001) AS ApparentPowerC,
		    	IFNULL(ROUND(AVG(dv.PowerFactorA), 2), 0.001) AS PowerFactorA,
		    	IFNULL(ROUND(AVG(dv.PowerFactorB), 2), 0.001) AS PowerFactorB,
		    	IFNULL(ROUND(AVG(dv.PowerFactorC), 2), 0.001) AS PowerFactorC,
		    	IFNULL(ROUND(AVG(dv.VoltageAngleAB), 2), 0.001) AS VoltageAngleAB,
		    	IFNULL(ROUND(AVG(dv.VoltageAngleBC), 2), 0.001) AS VoltageAngleBC,
		    	IFNULL(ROUND(AVG(dv.VoltageAngleCA), 2), 0.001) AS VoltageAngleCA,
		    	IFNULL(ROUND(AVG(dv.QuadrantA), 2), 0.001) AS QuadrantA,
		    	IFNULL(ROUND(AVG(dv.QuadrantB), 2), 0.001) AS QuadrantB,
		    	IFNULL(ROUND(AVG(dv.QuadrantC), 2), 0.001) AS QuadrantC,
		    	IFNULL(ROUND(AVG(dv.SlidingWindowPower), 2), 0.001) AS SlidingWindowPower,
		    	IFNULL(ROUND(AVG(dv.NetTotalEnergy), 2), 0.001) AS NetTotalEnergy,
		    	IFNULL(ROUND(AVG(dv.TotalNetApparentEnergy), 2), 0.001) AS TotalNetApparentEnergy,
		    	IFNULL(ROUND(AVG(dv.TotalImportEnergy), 2), 0.001) AS TotalImportEnergy,
		    	IFNULL(ROUND(AVG(dv.TotalExportEnergy), 2), 0.001) AS TotalExportEnergy,
		    	IFNULL(ROUND(AVG(dv.TotalImportApparentEnergy), 2), 0.001) AS TotalImportApparentEnergy,
		    	IFNULL(ROUND(AVG(dv.TotalExportApparentEnergy), 2), 0.001) AS TotalExportApparentEnergy,
		    	IFNULL(ROUND(AVG(dv.Q1TotalReactiveEnergy), 2), 0.001) AS Q1TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.Q2TotalReactiveEnergy), 2), 0.001) AS Q2TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.Q3TotalReactiveEnergy), 2), 0.001) AS Q3TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.Q4TotalReactiveEnergy), 2), 0.001) AS Q4TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.Q1Q2TotalInductiveReactiveEnergy), 2), 0.001) AS Q1Q2TotalInductiveReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.Q3Q4TotalCapacitiveReactiveEnergy), 2), 0.001) AS Q3Q4TotalCapacitiveReactiveEnergy,
		    	IFNULL(ROUND(AVG(dv.NetEnergyA), 2), 0.001) AS NetEnergyA,
		    	IFNULL(ROUND(AVG(dv.NetEnergyB), 2), 0.001) AS NetEnergyB,
		    	IFNULL(ROUND(AVG(dv.NetEnergyC), 2), 0.001) AS NetEnergyC,
		    	IFNULL(ROUND(AVG(dv.NetApparentEnergyA), 2), 0.001) AS NetApparentEnergyA,
		    	IFNULL(ROUND(AVG(dv.NetApparentEnergyB), 2), 0.001) AS NetApparentEnergyB,
		    	IFNULL(ROUND(AVG(dv.NetApparentEnergyC), 2), 0.001) AS NetApparentEnergyC,
		    	IFNULL(ROUND(AVG(dv.ImportEnergyA), 2), 0.001) AS ImportEnergyA,
		    	IFNULL(ROUND(AVG(dv.ImportEnergyB), 2), 0.001) AS ImportEnergyB,
		    	IFNULL(ROUND(AVG(dv.ImportEnergyC), 2), 0.001) AS ImportEnergyC,
		    	IFNULL(ROUND(AVG(dv.ExportEnergyA), 2), 0.001) AS ExportEnergyA,
		    	IFNULL(ROUND(AVG(dv.ExportEnergyB), 2), 0.001) AS ExportEnergyB,
		    	IFNULL(ROUND(AVG(dv.ExportEnergyC), 2), 0.001) AS ExportEnergyC,
		    	IFNULL(ROUND(AVG(dv.ImportApparentEnergyA), 2), 0.001) AS ImportApparentEnergyA,
		    	IFNULL(ROUND(AVG(dv.ImportApparentEnergyB), 2), 0.001) AS ImportApparentEnergyB,
		    	IFNULL(ROUND(AVG(dv.ImportApparentEnergyC), 2), 0.001) AS ImportApparentEnergyC,
		    	IFNULL(ROUND(AVG(dv.ExportApparentEnergyA), 2), 0.001) AS ExportApparentEnergyA,
		    	IFNULL(ROUND(AVG(dv.ExportApparentEnergyB), 2), 0.001) AS ExportApparentEnergyB,
		    	IFNULL(ROUND(AVG(dv.ExportApparentEnergyC), 2), 0.001) AS ExportApparentEnergyC,
		    	IFNULL(ROUND(AVG(dv.Q1ReactiveEnergyA), 2), 0.001) AS Q1ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(dv.Q1ReactiveEnergyB), 2), 0.001) AS Q1ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(dv.Q1ReactiveEnergyC), 2), 0.001) AS Q1ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(dv.Q2ReactiveEnergyA), 2), 0.001) AS Q2ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(dv.Q2ReactiveEnergyB), 2), 0.001) AS Q2ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(dv.Q2ReactiveEnergyC), 2), 0.001) AS Q2ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(dv.Q3ReactiveEnergyA), 2), 0.001) AS Q3ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(dv.Q3ReactiveEnergyB), 2), 0.001) AS Q3ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(dv.Q3ReactiveEnergyC), 2), 0.001) AS Q3ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(dv.Q4ReactiveEnergyA), 2), 0.001) AS Q4ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(dv.Q4ReactiveEnergyB), 2), 0.001) AS Q4ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(dv.Q4ReactiveEnergyC), 2), 0.001) AS Q4ReactiveEnergyC,
			</if>
			<if test="table_name == 'model_abb_trio_class6210'">
				  IFNULL(ROUND(AVG(dv.AuroraType), 2), 0.001) AS AuroraType,
			      IFNULL(ROUND(AVG(dv.GridType), 2), 0.001) AS GridType,
			      IFNULL(ROUND(AVG(dv.TransformerType), 2), 0.001) AS TransformerType,
			      IFNULL(ROUND(AVG(dv.StatesByte0), 2), 0.001) AS StatesByte0,
			      IFNULL(ROUND(AVG(dv.StatesByte1), 2), 0.001) AS StatesByte1,
			      IFNULL(ROUND(AVG(dv.StatesByte2), 2), 0.001) AS StatesByte2,
			      IFNULL(ROUND(AVG(dv.StatesByte3), 2), 0.001) AS StatesByte3,
			      IFNULL(ROUND(AVG(dv.StatesByte4), 2), 0.001) AS StatesByte4,
			      IFNULL(ROUND(AVG(dv.TotalEnergy), 2), 0.001) AS TotalEnergy,
			      IFNULL(ROUND(AVG(dv.GridVoltage), 2), 0.001) AS GridVoltage,
			      IFNULL(ROUND(AVG(dv.GridCurrent), 2), 0.001) AS GridCurrent,
			      
			      IFNULL(ROUND(IF(AVG(dv.GridPower) <![CDATA[<]]> 0, 0, AVG(dv.GridPower)), 2), 0.001) AS GridPower,
			      
			      IFNULL(ROUND(AVG(dv.Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(dv.Input1Power), 2), 0.001) AS Input1Power,
			      IFNULL(ROUND(AVG(dv.Input1Voltage), 2), 0.001) AS Input1Voltage,
			      IFNULL(ROUND(AVG(dv.Input1Current), 2), 0.001) AS Input1Current,
			      IFNULL(ROUND(AVG(dv.Input2Power), 2), 0.001) AS Input2Power,
			      IFNULL(ROUND(AVG(dv.Input2Voltage), 2), 0.001) AS Input2Voltage,
			      IFNULL(ROUND(AVG(dv.Input2Current), 2), 0.001) AS Input2Current,
			      IFNULL(ROUND(AVG(dv.InverterTemperature), 2), 0.001) AS InverterTemperature,
			      IFNULL(ROUND(AVG(dv.BooseterTemperature), 2), 0.001) AS BooseterTemperature,
			      IFNULL(ROUND(AVG(dv.IslolationResistance), 2), 0.001) AS IslolationResistance,
			</if>
			<if test="table_name == 'model_lufft_class8020'">
				  IFNULL(ROUND(AVG(dv.RelativeHumidityActual), 2), 0.001) AS RelativeHumidityActual,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityMin), 2), 0.001) AS RelativeHumidityMin,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityMax), 2), 0.001) AS RelativeHumidityMax,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityAvg), 2), 0.001) AS RelativeHumidityAvg,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureActual), 2), 0.001) AS RelativeAirPressureActual,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureMin), 2), 0.001) AS RelativeAirPressureMin,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureMax), 2), 0.001) AS RelativeAirPressureMax,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureAvg), 2), 0.001) AS RelativeAirPressureAvg,
			      IFNULL(ROUND(AVG(dv.WindDirectionActual), 2), 0.001) AS WindDirectionActual,
			      IFNULL(ROUND(AVG(dv.WindDirectionMin), 2), 0.001) AS WindDirectionMin,
			      IFNULL(ROUND(AVG(dv.WindDirectionMax), 2), 0.001) AS WindDirectionMax,
			      IFNULL(ROUND(AVG(dv.WindDirectionVct), 2), 0.001) AS WindDirectionVct,
			      IFNULL(ROUND(AVG(dv.WindDirectionFast), 2), 0.001) AS WindDirectionFast,
			      IFNULL(ROUND(AVG(dv.WindDirectionCompassCorrected), 2), 0.001) AS WindDirectionCompassCorrected,
			      IFNULL(ROUND(AVG(dv.Compass), 2), 0.001) AS Compass,
			      IFNULL(ROUND(AVG(dv.PrecipitationType), 2), 0.001) AS PrecipitationType,
			      IFNULL(ROUND(AVG(dv.WindMeasurementQuality), 2), 0.001) AS WindMeasurementQuality,
			      
			      IFNULL(ROUND(IF(AVG(dv.IrradianceActual) <![CDATA[<]]> 0, 0, AVG(dv.IrradianceActual * 0.1 )), 2), 0.001) AS IrradianceActual,
			      
			      IFNULL(ROUND(AVG(dv.IrradianceMin), 2), 0.001) AS IrradianceMin,
			      IFNULL(ROUND(AVG(dv.IrradianceMax), 2), 0.001) AS IrradianceMax,
			      IFNULL(ROUND(AVG(dv.IrradianceAvg), 2), 0.001) AS IrradianceAvg,
			      IFNULL(ROUND(AVG(dv.AirTemperatureActual), 2), 0.001) AS AirTemperatureActual,
			      IFNULL(ROUND(AVG(dv.AirTemperatureMin), 2), 0.001) AS AirTemperatureMin,
			      IFNULL(ROUND(AVG(dv.AirTemperatureMax), 2), 0.001) AS AirTemperatureMax,
			      IFNULL(ROUND(AVG(dv.AirTemperatureAvg), 2), 0.001) AS AirTemperatureAvg,
			      IFNULL(ROUND(AVG(dv.DewPointActual), 2), 0.001) AS DewPointActual,
			      IFNULL(ROUND(AVG(dv.DewPointMin), 2), 0.001) AS DewPointMin,
			      IFNULL(ROUND(AVG(dv.DewPointMax), 2), 0.001) AS DewPointMax,
			      IFNULL(ROUND(AVG(dv.DewPointAvg), 2), 0.001) AS DewPointAvg,
			      IFNULL(ROUND(AVG(dv.WindChillTemperature), 2), 0.001) AS WindChillTemperature,
			      IFNULL(ROUND(AVG(dv.HeatingTemperatureWind), 2), 0.001) AS HeatingTemperatureWind,
			      IFNULL(ROUND(AVG(dv.HeatingTemperatureR2S), 2), 0.001) AS HeatingTemperatureR2S,
			      IFNULL(ROUND(AVG(dv.WindSpeedActual), 2), 0.001) AS WindSpeedActual,
			      IFNULL(ROUND(AVG(dv.WindSpeedMin), 2), 0.001) AS WindSpeedMin,
			      IFNULL(ROUND(AVG(dv.WindSpeedMax), 2), 0.001) AS WindSpeedMax,
			      IFNULL(ROUND(AVG(dv.WindSpeedAvg), 2), 0.001) AS WindSpeedAvg,
			      IFNULL(ROUND(AVG(dv.WindSpeedVct), 2), 0.001) AS WindSpeedVct,
			      IFNULL(ROUND(AVG(dv.WindSpeedFast), 2), 0.001) AS WindSpeedFast,
			      IFNULL(ROUND(AVG(dv.PrecipitationQuantityAbsolute), 2), 0.001) AS PrecipitationQuantityAbsolute,
			      IFNULL(ROUND(AVG(dv.PrecipitationQuantityDifferential), 2), 0.001) AS PrecipitationQuantityDifferential,
			      IFNULL(ROUND(AVG(dv.PrecipitationIntensity), 2), 0.001) AS PrecipitationIntensity,
			      IFNULL(ROUND(AVG(dv.AbsoluteHumidityActual), 2), 0.001) AS AbsoluteHumidityActual,
			      IFNULL(ROUND(AVG(dv.AbsoluteHumidityMin), 2), 0.001) AS AbsoluteHumidityMin,
			      IFNULL(ROUND(AVG(dv.AbsoluteHumidityMax), 2), 0.001) AS AbsoluteHumidityMax,
			      IFNULL(ROUND(AVG(dv.AbsoluteHumidityAvg), 2), 0.001) AS AbsoluteHumidityAvg,
			      IFNULL(ROUND(AVG(dv.MixingRatioActual), 2), 0.001) AS MixingRatioActual,
			      IFNULL(ROUND(AVG(dv.MixingRatioMin), 2), 0.001) AS MixingRatioMin,
			      IFNULL(ROUND(AVG(dv.MixingRatioMax), 2), 0.001) AS MixingRatioMax,
			      IFNULL(ROUND(AVG(dv.MixingRatioAvg), 2), 0.001) AS MixingRatioAvg,
			      IFNULL(ROUND(AVG(dv.AbsoluteAirPressureActual), 2), 0.001) AS AbsoluteAirPressureActual,
			      IFNULL(ROUND(AVG(dv.AbsoluteAirPressureMin), 2), 0.001) AS AbsoluteAirPressureMin,
			      IFNULL(ROUND(AVG(dv.AbsoluteAirPressureMax), 2), 0.001) AS AbsoluteAirPressureMax,
			      IFNULL(ROUND(AVG(dv.AbsoluteAirPressureAvg), 2), 0.001) AS AbsoluteAirPressureAvg,
			      IFNULL(ROUND(AVG(dv.WindSpeedStandardDeviation), 2), 0.001) AS WindSpeedStandardDeviation,
			      IFNULL(ROUND(AVG(dv.WindDirectionStandardDeviation), 2), 0.001) AS WindDirectionStandardDeviation,
			      IFNULL(ROUND(AVG(dv.WetBulbTemperature), 2), 0.001) AS WetBulbTemperature,
			      IFNULL(ROUND(AVG(dv.SpecificEnthalpy), 2), 0.001) AS SpecificEnthalpy,
			      IFNULL(ROUND(AVG(dv.AirDensityActual), 2), 0.001) AS AirDensityActual,
			      IFNULL(ROUND(AVG(dv.LeafWetnessActual), 2), 0.001) AS LeafWetnessActual,
			      IFNULL(ROUND(AVG(dv.LeafWetnessMin), 2), 0.001) AS LeafWetnessMin,
			      IFNULL(ROUND(AVG(dv.LeafWetnessMax), 2), 0.001) AS LeafWetnessMax,
			      IFNULL(ROUND(AVG(dv.LeafWetnessAvg), 2), 0.001) AS LeafWetnessAvg,
			      IFNULL(ROUND(AVG(dv.LeafWetnessState), 2), 0.001) AS LeafWetnessState,
			      IFNULL(ROUND(AVG(dv.ExternalTemperature), 2), 0.001) AS ExternalTemperature,
			      IFNULL(ROUND(AVG(dv.WindValueQualityFast), 2), 0.001) AS WindValueQualityFast,
			</if>
			<if test="table_name == 'model_lufft_ws501_umb_weather'">
				  IFNULL(ROUND(AVG(dv.RelativeHumidityActual), 2), 0.001) AS RelativeHumidityActual,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityMin), 2), 0.001) AS RelativeHumidityMin,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityMax), 2), 0.001) AS RelativeHumidityMax,
			      IFNULL(ROUND(AVG(dv.RelativeHumidityAvg), 2), 0.001) AS RelativeHumidityAvg,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureActual), 2), 0.001) AS RelativeAirPressureActual,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureMin), 2), 0.001) AS RelativeAirPressureMin,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureMax), 2), 0.001) AS RelativeAirPressureMax,
			      IFNULL(ROUND(AVG(dv.RelativeAirPressureAvg), 2), 0.001) AS RelativeAirPressureAvg,
			      IFNULL(ROUND(AVG(dv.WindDirectionActual), 2), 0.001) AS WindDirectionActual,
			      IFNULL(ROUND(AVG(dv.WindDirectionMin), 2), 0.001) AS WindDirectionMin,
			      IFNULL(ROUND(AVG(dv.WindDirectionMax), 2), 0.001) AS WindDirectionMax,
			      IFNULL(ROUND(AVG(dv.WindDirectionVct), 2), 0.001) AS WindDirectionVct,
			      IFNULL(ROUND(AVG(dv.WindDirectionFast), 2), 0.001) AS WindDirectionFast,
			      IFNULL(ROUND(AVG(dv.WindDirectionCompassCorrected), 2), 0.001) AS WindDirectionCompassCorrected,
			      IFNULL(ROUND(AVG(dv.Compass), 2), 0.001) AS Compass,
			      IFNULL(ROUND(AVG(dv.WindMeasurementQuality), 2), 0.001) AS WindMeasurementQuality,
			      IFNULL(ROUND(AVG(dv.PrecipitationType), 2), 0.001) AS PrecipitationType,
			      
			      IFNULL(ROUND(IF(AVG(dv.GlobalRadiation) <![CDATA[<]]> 0, 0, AVG(dv.GlobalRadiation)), 2), 0.001) AS GlobalRadiation,
			      
			      IFNULL(ROUND(AVG(dv.GlobalRadiation2), 2), 0.001) AS GlobalRadiation2,
			      IFNULL(ROUND(AVG(dv.GlobalRadiation3), 2), 0.001) AS GlobalRadiation3,
			      IFNULL(ROUND(AVG(dv.GlobalRadiation4), 2), 0.001) AS GlobalRadiation4,
			      IFNULL(ROUND(AVG(dv.AirTemperatureCActual), 2), 0.001) AS AirTemperatureCActual,
			      IFNULL(ROUND(AVG(dv.AirTemperatureCMin), 2), 0.001) AS AirTemperatureCMin,
			      IFNULL(ROUND(AVG(dv.AirTemperatureCMax), 2), 0.001) AS AirTemperatureCMax,
			      IFNULL(ROUND(AVG(dv.AirTemperatureCAvg), 2), 0.001) AS AirTemperatureCAvg,
			      IFNULL(ROUND(AVG(dv.DewPointActual), 2), 0.001) AS DewPointActual,
			      IFNULL(ROUND(AVG(dv.DewPointMin), 2), 0.001) AS DewPointMin,
			      IFNULL(ROUND(AVG(dv.DewPointMax), 2), 0.001) AS DewPointMax,
			      IFNULL(ROUND(AVG(dv.DewPointAvg), 2), 0.001) AS DewPointAvg,
			      IFNULL(ROUND(AVG(dv.WindChillTemperature), 2), 0.001) AS WindChillTemperature,
			      IFNULL(ROUND(AVG(dv.HeatingTemperatureWind), 2), 0.001) AS HeatingTemperatureWind,
			      IFNULL(ROUND(AVG(dv.HeatingTemperatureR2S), 2), 0.001) AS HeatingTemperatureR2S,
			      IFNULL(ROUND(AVG(dv.WindSpeedActual), 2), 0.001) AS WindSpeedActual,
			      IFNULL(ROUND(AVG(dv.WindSpeedMin), 2), 0.001) AS WindSpeedMin,
			      IFNULL(ROUND(AVG(dv.WindSpeedMax), 2), 0.001) AS WindSpeedMax,
			      IFNULL(ROUND(AVG(dv.WindSpeedAvg), 2), 0.001) AS WindSpeedAvg,
			      IFNULL(ROUND(AVG(dv.WindSpeedVct), 2), 0.001) AS WindSpeedVct,
			      IFNULL(ROUND(AVG(dv.WindSpeedFast), 2), 0.001) AS WindSpeedFast,
			      IFNULL(ROUND(AVG(dv.PrecipitationAbsolute), 2), 0.001) AS PrecipitationAbsolute,
			      IFNULL(ROUND(AVG(dv.PrecipitationDifferential), 2), 0.001) AS PrecipitationDifferential,
			      IFNULL(ROUND(AVG(dv.PrecipitationIntensity), 2), 0.001) AS PrecipitationIntensity,
			      IFNULL(ROUND(AVG(dv.AirTemperatureFActual), 2), 0.001) AS AirTemperatureFActual,
			      IFNULL(ROUND(AVG(dv.AirTemperatureFMin), 2), 0.001) AS AirTemperatureFMin,
			      IFNULL(ROUND(AVG(dv.AirTemperatureFMax), 2), 0.001) AS AirTemperatureFMax,
			      IFNULL(ROUND(AVG(dv.AirTemperatureFAvg), 2), 0.001) AS AirTemperatureFAvg,
			      IFNULL(ROUND(AVG(dv.ExternalTemperatureC), 2), 0.001) AS ExternalTemperatureC,
			      IFNULL(ROUND(AVG(dv.ExternalTemperatureF), 2), 0.001) AS ExternalTemperatureF,
			</if>
			<if test="table_name == 'model_solectria_sgi_226ivt'">
				  IFNULL(ROUND(AVG(dv.DCVoltage), 2), 0.001) AS DCVoltage,
			      
			      IFNULL(ROUND(IF(AVG(dv.ACPowerOutput) <![CDATA[<]]> 0, 0, AVG(dv.ACPowerOutput)), 2), 0.001) AS ACPowerOutput,
			      
			      IFNULL(ROUND(AVG(dv.ACGridFrequency), 2), 0.001) AS ACGridFrequency,
			      IFNULL(ROUND(AVG(dv.ACPowerStageCurrent), 2), 0.001) AS ACPowerStageCurrent,
			      IFNULL(ROUND(AVG(dv.L1toL2ACVoltage), 2), 0.001) AS L1toL2ACVoltage,
			      IFNULL(ROUND(AVG(dv.L2toL3ACVoltage), 2), 0.001) AS L2toL3ACVoltage,
			      IFNULL(ROUND(AVG(dv.L1toL3ACVoltage), 2), 0.001) AS L1toL3ACVoltage,
			      IFNULL(ROUND(AVG(dv.PhaseSequence), 2), 0.001) AS PhaseSequence,
			      IFNULL(ROUND(AVG(dv.CumulativeACEnergy), 2), 0.001) AS CumulativeACEnergy,
			      IFNULL(ROUND(AVG(dv.CumulativeOngridHours), 2), 0.001) AS CumulativeOngridHours,
			      IFNULL(ROUND(AVG(dv.FanOntimeHours), 2), 0.001) AS FanOntimeHours,
			      IFNULL(ROUND(AVG(dv.ACContactorCycles), 2), 0.001) AS ACContactorCycles,
			      IFNULL(ROUND(AVG(dv.SlaveID), 2), 0.001) AS SlaveID,
			      IFNULL(ROUND(AVG(dv.CriticalAlarms), 2), 0.001) AS CriticalAlarms,
			      IFNULL(ROUND(AVG(dv.InformativeAlarms), 2), 0.001) AS InformativeAlarms,
			</if>
			
			<if test="table_name == 'model_xantrex_gt100_250_500'">
				  IFNULL(ROUND(AVG(dv.VAB), 2), 0.001) AS VAB,
			      IFNULL(ROUND(AVG(dv.VBC), 2), 0.001) AS VBC,
			      IFNULL(ROUND(AVG(dv.VCA), 2), 0.001) AS VCA,
			      IFNULL(ROUND(AVG(dv.CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(dv.CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(dv.CurrentC), 2), 0.001) AS CurrentC,
			      
			      IFNULL(ROUND(IF(AVG(dv.ReadPower) <![CDATA[<]]> 0, 0, AVG(dv.ReadPower)), 2), 0.001) AS ReadPower,
			      
			      IFNULL(ROUND(AVG(dv.PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(dv.PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(dv.PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(dv.GridFrequency), 2), 0.001) AS GridFrequency,
			      IFNULL(ROUND(AVG(dv.SystemState), 2), 0.001) AS SystemState,
			      IFNULL(ROUND(AVG(dv.GoalState), 2), 0.001) AS GoalState,
			      IFNULL(ROUND(AVG(dv.FaultCode), 2), 0.001) AS FaultCode,
			      IFNULL(ROUND(AVG(dv.AccumulatedEnergy), 2), 0.001) AS AccumulatedEnergy,
			      IFNULL(ROUND(AVG(dv.RMatrixTemp), 2), 0.001) AS RMatrixTemp,
			      IFNULL(ROUND(AVG(dv.LMatrixTemp), 2), 0.001) AS LMatrixTemp,
			      IFNULL(ROUND(AVG(dv.IntakeAirTemperature), 2), 0.001) AS IntakeAirTemperature,
			</if>
			
			<if test="table_name == 'model_xantrex_inverter'">
				  IFNULL(ROUND(AVG(dv.VAB), 2), 0.001) AS VAB,
			      IFNULL(ROUND(AVG(dv.VBC), 2), 0.001) AS VBC,
			      IFNULL(ROUND(AVG(dv.VCA), 2), 0.001) AS VCA,
			      IFNULL(ROUND(AVG(dv.CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(dv.CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(dv.CurrentC), 2), 0.001) AS CurrentC,
			      
			      IFNULL(ROUND(IF(AVG(dv.ReadPower) <![CDATA[<]]> 0, 0, AVG(dv.ReadPower)), 2), 0.001) AS ReadPower,
			      
			      IFNULL(ROUND(AVG(dv.PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(dv.PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(dv.PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(dv.GridFrequency), 2), 0.001) AS GridFrequency,
			      IFNULL(ROUND(AVG(dv.SystemState), 2), 0.001) AS SystemState,
			      IFNULL(ROUND(AVG(dv.GoalState), 2), 0.001) AS GoalState,
			      IFNULL(ROUND(AVG(dv.FaultCode), 2), 0.001) AS FaultCode,
			      IFNULL(ROUND(AVG(dv.kWh), 2), 0.001) AS kWh,
			</if>
			
			<if test="table_name == 'model_ae1000nx_class9644'">
				  IFNULL(ROUND(AVG(dv.LastRestart), 2), 0.001) AS LastRestart,
			      IFNULL(ROUND(AVG(dv.Uptime), 2), 0.001) AS Uptime,
			      IFNULL(ROUND(AVG(dv.Year), 2), 0.001) AS Year,
			      IFNULL(ROUND(AVG(dv.Month), 2), 0.001) AS Month,
			      IFNULL(ROUND(AVG(dv.Day), 2), 0.001) AS Day,
			      IFNULL(ROUND(AVG(dv.Hour), 2), 0.001) AS Hour,
			      IFNULL(ROUND(AVG(dv.Minutes), 2), 0.001) AS Minutes,
			      IFNULL(ROUND(AVG(dv.Seconds), 2), 0.001) AS Seconds,
			      IFNULL(ROUND(AVG(dv.CurrentTime), 2), 0.001) AS CurrentTime,
			      
			      IFNULL(ROUND(IF(AVG(dv.ACPower) <![CDATA[<]]> 0, 0, AVG(dv.ACPower)), 2), 0.001) AS ACPower,
			      
			      IFNULL(ROUND(AVG(dv.ACFrequency), 2), 0.001) AS ACFrequency,
			      IFNULL(ROUND(AVG(dv.PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(dv.PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(dv.CommonMode), 2), 0.001) AS CommonMode,
			      IFNULL(ROUND(AVG(dv.AmbientTemperature), 2), 0.001) AS AmbientTemperature,
			      IFNULL(ROUND(AVG(dv.CoolantTemperature), 2), 0.001) AS CoolantTemperature,
			      IFNULL(ROUND(AVG(dv.ReactorTemperature), 2), 0.001) AS ReactorTemperature,
			      IFNULL(ROUND(AVG(dv.CabinetTemperature), 2), 0.001) AS CabinetTemperature,
			      IFNULL(ROUND(AVG(dv.BusVoltage), 2), 0.001) AS BusVoltage,
			      IFNULL(ROUND(AVG(dv.GroundCurrent), 2), 0.001) AS GroundCurrent,
			      IFNULL(ROUND(AVG(dv.ReactivePower), 2), 0.001) AS ReactivePower,
			      IFNULL(ROUND(AVG(dv.ACCurrent), 2), 0.001) AS ACCurrent,
			      IFNULL(ROUND(AVG(dv.TodaykWh), 2), 0.001) AS TodaykWh,
			      IFNULL(ROUND(AVG(dv.YTDkWhTotal), 2), 0.001) AS YTDkWhTotal,
			      IFNULL(ROUND(AVG(dv.LifekWhTotal), 2), 0.001) AS LifekWhTotal,
			      IFNULL(ROUND(AVG(dv.YTDkWh), 2), 0.001) AS YTDkWh,
			      IFNULL(ROUND(AVG(dv.LifekWh), 2), 0.001) AS LifekWh,
			      IFNULL(ROUND(AVG(dv.Last15MinkWh), 2), 0.001) AS Last15MinkWh,
			      IFNULL(ROUND(AVG(dv.TimeStamp15Minutes), 2), 0.001) AS TimeStamp15Minutes,
			      IFNULL(ROUND(AVG(dv.State), 2), 0.001) AS State,
			      IFNULL(ROUND(AVG(dv.Limits), 2), 0.001) AS Limits,
			      IFNULL(ROUND(AVG(dv.MasterFault), 2), 0.001) AS MasterFault,
			      IFNULL(ROUND(AVG(dv.MasterWarning), 2), 0.001) AS MasterWarning,
			      IFNULL(ROUND(AVG(dv.ArrayFault), 2), 0.001) AS ArrayFault,
			      IFNULL(ROUND(AVG(dv.ArrayWarning), 2), 0.001) AS ArrayWarning,
			      IFNULL(ROUND(AVG(dv.GridFault), 2), 0.001) AS GridFault,
			      IFNULL(ROUND(AVG(dv.GridWarning), 2), 0.001) AS GridWarning,
			      IFNULL(ROUND(AVG(dv.SystemFault), 2), 0.001) AS SystemFault,
			      IFNULL(ROUND(AVG(dv.SystemWarning), 2), 0.001) AS SystemWarning,
			      IFNULL(ROUND(AVG(dv.DriveFault), 2), 0.001) AS DriveFault,
			      IFNULL(ROUND(AVG(dv.DriveWarning), 2), 0.001) AS DriveWarning,
			      IFNULL(ROUND(AVG(dv.TemperatureFault), 2), 0.001) AS TemperatureFault,
			      IFNULL(ROUND(AVG(dv.TemperatureWarning), 2), 0.001) AS TemperatureWarning,
			      IFNULL(ROUND(AVG(dv.CoolingSystemFault), 2), 0.001) AS CoolingSystemFault,
			      IFNULL(ROUND(AVG(dv.CoolingSystemWarning), 2), 0.001) AS CoolingSystemWarning,
			      IFNULL(ROUND(AVG(dv.ElectricInterlockFault), 2), 0.001) AS ElectricInterlockFault,
			      IFNULL(ROUND(AVG(dv.ElectricInterlockWarning), 2), 0.001) AS ElectricInterlockWarning,
			      IFNULL(ROUND(AVG(dv.PowerSupplyFault), 2), 0.001) AS PowerSupplyFault,
			      IFNULL(ROUND(AVG(dv.PowerSupplyWarning), 2), 0.001) AS PowerSupplyWarning,
			      IFNULL(ROUND(AVG(dv.RequestSetACPowerLimit), 2), 0.001) AS RequestSetACPowerLimit,
			      IFNULL(ROUND(AVG(dv.LowerRangeOfACPowerLimit), 2), 0.001) AS LowerRangeOfACPowerLimit,
			      IFNULL(ROUND(AVG(dv.UpperRangeOfACPowerLimit), 2), 0.001) AS UpperRangeOfACPowerLimit,
			      IFNULL(ROUND(AVG(dv.RequestSetInstantaneousReactivePowerSetPoint), 2), 0.001) AS RequestSetInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(dv.LowerRangeOfInstantaneousReactivePowerSetPoint), 2), 0.001) AS LowerRangeOfInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(dv.UpperRangeOfInstantaneousReactivePowerSetPoint), 2), 0.001) AS UpperRangeOfInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(dv.EnableDisableTheUnit), 2), 0.001) AS EnableDisableTheUnit,
			      IFNULL(ROUND(AVG(dv.SetReadReactivePowerMode), 2), 0.001) AS SetReadReactivePowerMode,
			      IFNULL(ROUND(AVG(dv.SetReadPACLimit), 2), 0.001) AS SetReadPACLimit,
			      IFNULL(ROUND(AVG(dv.SetReadInstantaneousReactivePowerSetPoint), 2), 0.001) AS SetReadInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(dv.SetReadPowerFactorSetPoint), 2), 0.001) AS SetReadPowerFactorSetPoint,
			      IFNULL(ROUND(AVG(dv.ACPowerRampRate), 2), 0.001) AS ACPowerRampRate,
			      IFNULL(ROUND(AVG(dv.ReactivePowerRampRate), 2), 0.001) AS ReactivePowerRampRate,
			      IFNULL(ROUND(AVG(dv.PowerFactorRampRate), 2), 0.001) AS PowerFactorRampRate,
			      IFNULL(ROUND(AVG(dv.ReactivePowerSignConvention), 2), 0.001) AS ReactivePowerSignConvention,
			      IFNULL(ROUND(AVG(dv.DCS_N), 2), 0.001) AS DCS_N,
			      IFNULL(ROUND(AVG(dv.DCS_StCtcr), 2), 0.001) AS DCS_StCtcr,
			      IFNULL(ROUND(AVG(dv.DCS_StCpt), 2), 0.001) AS DCS_StCpt,
			      IFNULL(ROUND(AVG(dv.DCS_EvtFlt), 2), 0.001) AS DCS_EvtFlt,
			      IFNULL(ROUND(AVG(dv.DCS_EvtWrn), 2), 0.001) AS DCS_EvtWrn,
			      IFNULL(ROUND(AVG(dv.DCS_StVnd), 2), 0.001) AS DCS_StVnd,
			      IFNULL(ROUND(AVG(dv.DCS_DCA), 2), 0.001) AS DCS_DCA,
			      IFNULL(ROUND(AVG(dv.DCS_DCADif), 2), 0.001) AS DCS_DCADif,
			      IFNULL(ROUND(AVG(dv.DCS_DCV), 2), 0.001) AS DCS_DCV,
			      IFNULL(ROUND(AVG(dv.DCS_Tmp), 2), 0.001) AS DCS_Tmp,
			      IFNULL(ROUND(AVG(dv.DCS_InId01), 2), 0.001) AS DCS_InId01,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt01), 2), 0.001) AS DCS_InFlt01,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn01), 2), 0.001) AS DCS_InWrn01,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA01), 2), 0.001) AS DCS_InPDCA01,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA01), 2), 0.001) AS DCS_InNDCA01,
			      IFNULL(ROUND(AVG(dv.DCS_InId02), 2), 0.001) AS DCS_InId02,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt02), 2), 0.001) AS DCS_InFlt02,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn02), 2), 0.001) AS DCS_InWrn02,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA02), 2), 0.001) AS DCS_InPDCA02,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA02), 2), 0.001) AS DCS_InNDCA02,
			      IFNULL(ROUND(AVG(dv.DCS_InId03), 2), 0.001) AS DCS_InId03,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt03), 2), 0.001) AS DCS_InFlt03,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn03), 2), 0.001) AS DCS_InWrn03,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA03), 2), 0.001) AS DCS_InPDCA03,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA03), 2), 0.001) AS DCS_InNDCA03,
			      IFNULL(ROUND(AVG(dv.DCS_InId04), 2), 0.001) AS DCS_InId04,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt04), 2), 0.001) AS DCS_InFlt04,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn04), 2), 0.001) AS DCS_InWrn04,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA04), 2), 0.001) AS DCS_InPDCA04,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA04), 2), 0.001) AS DCS_InNDCA04,
			      IFNULL(ROUND(AVG(dv.DCS_InId05), 2), 0.001) AS DCS_InId05,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt05), 2), 0.001) AS DCS_InFlt05,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn05), 2), 0.001) AS DCS_InWrn05,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA05), 2), 0.001) AS DCS_InPDCA05,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA05), 2), 0.001) AS DCS_InNDCA05,
			      IFNULL(ROUND(AVG(dv.DCS_InId06), 2), 0.001) AS DCS_InId06,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt06), 2), 0.001) AS DCS_InFlt06,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn06), 2), 0.001) AS DCS_InWrn06,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA06), 2), 0.001) AS DCS_InPDCA06,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA06), 2), 0.001) AS DCS_InNDCA06,
			      IFNULL(ROUND(AVG(dv.DCS_InId07), 2), 0.001) AS DCS_InId07,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt07), 2), 0.001) AS DCS_InFlt07,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn07), 2), 0.001) AS DCS_InWrn07,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA07), 2), 0.001) AS DCS_InPDCA07,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA07), 2), 0.001) AS DCS_InNDCA07,
			      IFNULL(ROUND(AVG(dv.DCS_InId08), 2), 0.001) AS DCS_InId08,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt08), 2), 0.001) AS DCS_InFlt08,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn08), 2), 0.001) AS DCS_InWrn08,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA08), 2), 0.001) AS DCS_InPDCA08,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA08), 2), 0.001) AS DCS_InNDCA08,  
			      IFNULL(ROUND(AVG(dv.DCS_InId09), 2), 0.001) AS DCS_InId09,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt09), 2), 0.001) AS DCS_InFlt09,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn09), 2), 0.001) AS DCS_InWrn09,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA09), 2), 0.001) AS DCS_InPDCA09,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA09), 2), 0.001) AS DCS_InNDCA09,
			      IFNULL(ROUND(AVG(dv.DCS_InId10), 2), 0.001) AS DCS_InId10,
			      IFNULL(ROUND(AVG(dv.DCS_InFlt10), 2), 0.001) AS DCS_InFlt10,
			      IFNULL(ROUND(AVG(dv.DCS_InWrn10), 2), 0.001) AS DCS_InWrn10,
			      IFNULL(ROUND(AVG(dv.DCS_InPDCA10), 2), 0.001) AS DCS_InPDCA10,
			      IFNULL(ROUND(AVG(dv.DCS_InNDCA10), 2), 0.001) AS DCS_InNDCA10,

			</if>
			
			<if test="table_name == 'model_poa_temp'">
				  IFNULL(ROUND(AVG(dv.T_AMB), 2), 0.001) AS T_AMB,
			      IFNULL(ROUND(AVG(dv.T_MOD), 2), 0.001) AS T_MOD,
			</if>
			
			<if test="table_name == 'model_eri_weather_icp_class8050'">
				  IFNULL(ROUND(AVG(dv.panel_temp), 2), 0.001) AS T_AMB,
			      IFNULL(ROUND(AVG(dv.ambient_temp), 2), 0.001) AS T_MOD,
			      IFNULL(ROUND(AVG(dv.wind_speed), 2), 0.001) AS T_MOD,
			      IFNULL(ROUND(AVG(dv.solar_irradiation), 2), 0.001) AS T_MOD,
			      IFNULL(ROUND(AVG(dv.wind_direction), 2), 0.001) AS T_MOD,
			</if>
			
			<!-- virtual device -->
			<if test="table_name == 'model_virtual_meter_or_inverter'">
				IFNULL(ROUND(IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0, 0, AVG(dv.nvmActivePower)), 2), 0.001) AS Power,
		    	IFNULL(ROUND(SUM(dv.nvmActiveEnergy), 2), 0.001) AS Energy,
			</if>
			
			<!-- Energy calculation field -->
			<if test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 8 or id_device_type == 9">
				IFNULL(ROUND(SUM(dv.MeasuredProduction), 2), 0.001) AS Energy,
			</if>
			
			<!-- Measured Production calculation field -->
			<if test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 8 or id_device_type == 9">
				<choose>
					<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
						IFNULL(ROUND(AVG(dv.nvmActivePower), 2), 0.001)
					</when>
					<otherwise>
						IFNULL(ROUND(SUM(dv.MeasuredProduction), 2), 0.001)
					</otherwise>
				</choose> AS MeasuredProduction,
			</if>
			<if test="id_device_type == 12">
				<choose>
					<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
						IFNULL(ROUND(AVG(dv.nvmActivePower), 2), 0.001)
					</when>
					<otherwise>
						IFNULL(ROUND(SUM(dv.nvmActiveEnergy), 2), 0.001)
					</otherwise>
				</choose> AS MeasuredProduction,
			</if>
			
			<!-- Expected Power calculation field -->
			<if test="id_device_type == 12">
				IFNULL(ROUND(AVG(dv.expected_power_ac), 2), 0.001) AS expected_power,
			</if>
			
			<!-- Expected Energy calculation field -->
			<if test="id_device_type == 12">
				IFNULL(ROUND(AVG(dv.expected_power_ac), 2), 0.001)
				<choose>
					<when test="data_send_time == 1">
						* 5 / 60
					</when>
					<when test="data_send_time == 2">
						/ 4
					</when>
					<when test="data_send_time == 3">
						* 1
					</when>
					<when test="data_send_time == 4">
						/ 60
					</when>
					<when test="data_send_time == 5">
						* 24
					</when>
					<when test="data_send_time == 6">
						* 24 * 7
					</when>
					<when test="data_send_time == 7">
						* 24 * DAYOFMONTH(LAST_DAY(dv.time))
					</when>
					<when test="data_send_time == 8">
						* 24 * DAYOFYEAR(DATE_FORMAT(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-12-31'))
					</when>
				</choose> AS expected_energy,
			</if>
			
			<if test="(filterBy == 'today') and data_send_time == 1">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == 'today') and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == 'today') and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				FROM_UNIXTIME(dv.time, '%d. %b') AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>
			
			<if test="(filterBy == 'today') and data_send_time == 4">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == 'today') and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
			</if>

			<if test="(filterBy == '3_day') and data_send_time == 1">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == '3_day') and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>


			<if test="(filterBy == '3_day') and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:00' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>
			
			<if test="(filterBy == '3_day') and data_send_time == 4">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == '3_day') and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
			</if>

			<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 1">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>


			<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>
			
			<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 4">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>
			
			<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
			</if>

			<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%m/%d' ) AS categories_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>

			<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
			</if>

			<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 6">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
				FLOOR(DATEDIFF(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), #{start_date}) / 7 ) AS time_group_by
			</if>

			<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%b. %Y' ) AS categories_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>
			
			<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>
			
			<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
			</if>
			
			<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 6">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
				FLOOR(DATEDIFF(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), #{start_date}) / 7 ) AS time_group_by
			</if>
			
			<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 7">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%Y' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%Y' )  AS time_group_by
			</if>

			<if test="(filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 8">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS time_group_by
			</if>
			
			<if test="filterBy == 'custom' and data_send_time == 1">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
				CASE
					WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
					ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
				END AS categories_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="filterBy == 'custom' and data_send_time == 2">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
				CASE
					WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
					ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
				END AS categories_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>

			<if test="filterBy == 'custom' and data_send_time == 3">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
				CASE
					WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
					ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
				END AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
			</if>
			
			<if test="filterBy == 'custom' and data_send_time == 4">
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
				CASE
					WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
					ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
				END AS categories_time,
				FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
			</if>
			
			<if test="filterBy == 'custom' and data_send_time == 5">
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
				CASE
					WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
					ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
				END AS categories_time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
			</if>
		
		FROM
			${datatablename} dv 
			LEFT JOIN device d ON d.id = dv.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			dv.id_device = #{id}
			AND (CAST(CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(#{end_date} AS DATETIME))
		    <foreach item="item" index="index" collection="hidden_data_list">
				AND CONVERT_TZ( dv.time, '+00:00', t.`offset` ) NOT BETWEEN #{item.date_from} AND #{item.date_to}
		    </foreach>
		GROUP BY time_group_by 
		ORDER BY time_group_by ASC
	</select>
</mapper>