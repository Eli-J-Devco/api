<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Device">
	<resultMap id="DeviceMap"
		type="com.nwm.api.entities.DeviceEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_vendor" column="id_vendor" />
		<result property="serial_number" column="serial_number" />
		<result property="modbusdevicenumber" column="modbusdevicenumber" />
		<result property="devicename" column="devicename" />
		<result property="devicetype" column="devicetype" />
		<result property="deviceclass" column="deviceclass" />
		<result property="configuration" column="configuration" />
		<result property="configurationchangetime" column="configurationchangetime" />
		<result property="configurationchecksum" column="configurationchecksum" />
		<result property="datatablename" column="datatablename" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device_type" column="id_device_type" />
		<result property="active" column="active" />
		<result property="id_device_group" column="id_device_group" />
		<result property="keyword" column="keyword" />
		<result property="device_type_name" column="device_type_name" />
		<result property="view_tablename" column="view_tablename" />
		<result property="job_tablename" column="job_tablename" />
		<result property="order_id" column="order_id" />
		<result property="reverse_poa" column="reverse_poa" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
		<result property="rating_ac_power" column="rating_ac_power" />
		<result property="field_value_default" column="field_value_default" />
		<result property="ssh_host" column="ssh_host" />
		<result property="ssh_user" column="ssh_user" />
		<result property="ssh_pass" column="ssh_pass" />
		<result property="ssh_port" column="ssh_port" />
		<result property="hidden" column="hidden" />
		<result property="virtual_device_type" column="virtual_device_type" />
		
		
		
		
		
		
		
	</resultMap>

	<select id="getListBySerialNumber" resultMap="DeviceMap" parameterType="String">
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.serialnumber,
			d.modbusdevicenumber,
			d.devicename,
			d.devicetype,
			d.deviceclass,
			d.configuration,
			d.configurationchecksum,
			d.configurationchangetime,
			d.datatablename,
			d.id_device_group,
			d.id_device_type,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.reverse_poa,
			d.field_value_default,
			d.ssh_host,
			d.ssh_user,
			d.ssh_pass,
			d.ssh_port,
			d.hidden,
			d.virtual_device_type
		FROM
			device AS d
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.serial_number = #{serial_number};
	</select>
	
	<select id="getListByDeviceType" resultMap="DeviceMap">
		SELECT
			d.id,
			d.id_site,
			d.id_device_type,
			d.id_vendor,
			d.serial_number,
			d.devicename,
			d.devicetype,
			0 AS active 
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id 
		WHERE
			d.id_device_type = #{id_device_type} 
			AND s.id = #{id_site} 
			AND s.id_customer = #{id_customer} 
			AND s.`status` = 1 
			AND s.is_delete = 0
	</select>
	
	
	<select id="getListDeviceByGroup" resultMap="DeviceMap">
		SELECT
			d.id,
			d.id_site,
			d.id_device_type,
			d.id_device_group,
			d.id_vendor,
			d.serial_number,
			d.devicename,
			d.devicetype,
			0 AS active
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id 
		WHERE
			d.id_device_group = #{id_device_group} 
			AND s.id = #{id_site} 
			AND s.id_customer = #{id_customer} 
			AND s.`status` = 1
			AND s.is_delete = 0
	</select>
	
	<select id="getListDeviceBySite" resultType="Map" >
		SELECT
			s.id,
			s.id_site,
			s.`id_vendor`,
			s.id_device_type,
			s.id_device_group,
			s.serial_number,
			s.serialnumber,
			s.modbusdevicenumber,
			s.devicename,
			s.devicetype,
			s.deviceclass,
			s.`configuration`,
			DATE_FORMAT(s.configurationchangetime,'%m/%d/%Y') AS configurationchangetime,
			s.configurationchecksum,
			s.datatablename,
			s.order_id,
			s.`status`,
			s.is_delete,
			dt.name AS device_type_name,
			s.view_tablename,
			s.job_tablename,
			s.order_id,
			s.reverse_poa,
			s.field_value_default,
			s.ssh_host,
			s.ssh_user,
			s.ssh_pass,
			s.ssh_port,
			s.lat,
			s.lng,
			s.rating_ac_power,
			IF(s.`hidden` = 1, 1, 0) AS hidden,
			s.virtual_device_type,
			s.ip_address
		FROM
			device s
			LEFT JOIN device_type dt ON dt.id = s.id_device_type
		WHERE s.id_site = #{id_site}
		<if test="keyword != null">
			 AND s.devicename LIKE CONCAT("%",#{keyword}, "%")
		</if> 	
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>         
	            <when test="sort_column == 'id_vendor'">
	                s.id_vendor ${order_by}
	            </when>
	            <when test="sort_column == 'id_device_type'">
	                s.id_device_type ${order_by}
	            </when>
	            <when test="sort_column == 'id_device_group'">
	                s.id_device_group ${order_by}
	            </when>
	            <when test="sort_column == 'serial_number'">
	                s.serial_number ${order_by}
	            </when>
	            <when test="sort_column == 'datatablename'">
	                s.datatablename ${order_by}
	            </when>
	            <when test="sort_column == 'status'">
	                status ${order_by}
	            </when>
	            
	            <otherwise>
			      s.id DESC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getDeviceBySiteTotalRecord"  resultType="int" parameterType="com.nwm.api.entities.DeviceEntity">
    	SELECT count(*) as totalRow
		FROM device s
		WHERE s.id_site = #{id_site}
		<if test="keyword != null">
			AND s.devicename LIKE CONCAT("%",#{keyword}, "%")
		</if> 
  	</select>
  	
  	
  	<update id="updateStatus">
		UPDATE `device`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id} AND id_site = #{id_site}
	</update>
	
	
	<update id="updateLastUpdated">
		UPDATE `device`
		SET
			<if test="last_updated != null">
				 `last_updated` = #{last_updated},
			</if> 
			`last_value` = #{last_value},
			`field_value1` = #{field_value1},
			`field_value2` = #{field_value2},
			`field_value3` = #{field_value3}
		WHERE
			`id` = #{id}
	</update>
	
	
	
	<update id="updateSshStatus">
		UPDATE `device`
		SET
			`ssh_status` = #{ssh_status},
			`ssh_last_connect` = #{ssh_last_connect}
		WHERE
			`id` = #{id}
	</update>
	
	
	<update id="deleteDevice">
		UPDATE `device`
		SET
			`is_delete` = #{is_delete}
		WHERE
			`id` = #{id}
	</update>
	
	<insert id="insertDevice" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `device`(
			`id_site`,
			`id_vendor`,
			`id_device_type`,
			`id_device_group`,
			`serial_number`,
			`serialnumber`,
			`modbusdevicenumber`,
			`devicename`,
			`devicetype`,
			`deviceclass`,
			`configuration`,
			`configurationchangetime`,
			`configurationchecksum`,
			`datatablename`,
			`view_tablename`,
			`job_tablename`,
			`order_id`,
			`reverse_poa`,
			`field_value_default`,
			`ssh_host`,
			`ssh_user`,
			`ssh_pass`,
			`ssh_port`,
			`lat`,
			`lng`,
			`rating_ac_power`,
			`hidden`,
			`virtual_device_type`,
			`ip_address`
		)VALUES(
			#{id_site},
			#{id_vendor},
			#{id_device_type},
			#{id_device_group},
			#{serial_number},
			#{serialnumber},
			#{modbusdevicenumber},
			#{devicename},
			#{devicetype},
			#{deviceclass},
			#{configuration},
			#{configurationchangetime},
			#{configurationchecksum},
			#{datatablename},
			#{view_tablename},
			#{job_tablename},
			#{order_id},
			#{reverse_poa},
			#{field_value_default},
			#{ssh_host},
			#{ssh_user},
			#{ssh_pass},
			#{ssh_port},
			#{lat},
			#{lng},
			#{rating_ac_power},
			#{hidden},
			#{virtual_device_type},
			#{ip_address}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateDevice">
		<if test="checkAll == 1">
			UPDATE `device`
			SET
				rating_ac_power = #{rating_ac_power}
			WHERE id_site = #{id_site} AND id_device_type = #{id_device_type}
		</if>
		<if test="checkAll == 0">
			UPDATE `device`
			SET
				id_site = #{id_site},
				id_vendor = #{id_vendor},
				id_device_type = #{id_device_type},
				id_device_group = #{id_device_group},
				serial_number = #{serial_number},
				serialnumber = #{serialnumber},
				modbusdevicenumber = #{modbusdevicenumber},
				devicename = #{devicename},
				devicetype = #{devicetype},
				deviceclass = #{deviceclass},
				configuration = #{configuration},
				configurationchangetime = #{configurationchangetime},
				configurationchecksum = #{configurationchecksum},
				datatablename = #{datatablename},
				view_tablename = #{view_tablename},
				job_tablename = #{job_tablename},
				order_id = #{order_id},
				reverse_poa = #{reverse_poa},
				field_value_default = #{field_value_default},
				ssh_host = #{ssh_host},
				ssh_user = #{ssh_user},
				ssh_pass = #{ssh_pass},
				ssh_port = #{ssh_port},
				lat = #{lat},
				lng = #{lng},
				rating_ac_power = #{rating_ac_power},
				`hidden` = #{hidden},
				virtual_device_type = #{virtual_device_type},
				ip_address = #{ip_address}
			WHERE
				`id` = #{id}
		</if>
	</update>
	
	
	
	
	<select id="getListSshDataloggerCellModem" resultType="Map" >
		SELECT
			s.`name` AS site_name,
			dt.`name` AS device_type_name,
			d.id,
			d.devicename,
			d.ssh_host,
			d.ssh_user,
			d.ssh_pass,
			d.ssh_port,
			d.ssh_status,
			DATE_FORMAT(d.ssh_last_connect, "%m-%d-%Y %H:%m:%s") AS ssh_last_connect,
			d.`status`,
			d.is_delete
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON s.id = d.id_site 
		WHERE d.`status` = 1 
		AND d.is_delete = 0
		AND s.`status` = 1
		AND s.is_delete = 0
		AND d.ssh_host IS NOT NULL
		AND d.ssh_pass IS NOT NULL
		AND d.ssh_user IS NOT NULL
		AND d.ssh_port IS NOT NULL

		<if test="keyword != null">
			 AND s.name LIKE CONCAT("%",#{keyword}, "%")
		</if> 	
		    ORDER BY
	        <choose>  
	            <when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>  
	                   
	            <when test="sort_column == 'site_name'">
	                s.name ${order_by}
	            </when>
	            
	            <when test="sort_column == 'name'">
	                d.name ${order_by}
	            </when>
	            
	            <when test="sort_column == 'ssh_status'">
	                d.ssh_status ${order_by}
	            </when>
	            
	            <otherwise>
			      d.id_device_group DESC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getTotalSshDataloggerCellModem"  resultType="int" parameterType="com.nwm.api.entities.DeviceEntity">
    	SELECT count(*) as totalRow
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site 
		WHERE d.`status` = 1 
		AND d.is_delete = 0
		AND s.`status` = 1
		AND s.is_delete = 0
		AND d.ssh_host IS NOT NULL
		AND d.ssh_pass IS NOT NULL
		AND d.ssh_user IS NOT NULL
		AND d.ssh_port IS NOT NULL
		<if test="keyword != null">
			AND s.name LIKE CONCAT("%",#{keyword}, "%")
		</if> 
  	</select>
  	
  	<select id="getListHiddenDataByDevice" resultType="Map">
		SELECT
			id,
			CONCAT_WS(" - ", date_from, date_to) AS text
		FROM
			hidden_data
		WHERE
			id_device = #{id}
			AND status = 1
			AND is_delete = 0
	</select>
	
  	<insert id="insertHiddenData" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `hidden_data`(
			`id_device`,
			`date_from`,
			`date_to`,
			`create_by`,
			`create_date`
		)VALUES(
			#{id},
			#{date_from},
			#{date_to},
			#{id_employee},
			NOW()
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="deleteHiddenData">
		UPDATE `hidden_data`
		SET
			is_delete = 1,
			update_by = #{id_employee},
			update_date = NOW()
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getLowProductionErrorId" resultType="int">
    	SELECT
			e.id
		FROM
			error e
			LEFT JOIN device_group dg ON dg.id = e.id_device_group
		WHERE
			e.status = 1
			AND e.is_delete = 0
			AND e.error_code = 1002
			AND dg.status = 1
			AND dg.is_delete = 0
			AND dg.table_name = #{datatablename}
	</select>
  	
	<select id="getCurrentProductionPercentage" resultType="double">
		SELECT
			IF(
				d.last_value IS NULL OR d.last_value <![CDATA[<=]]> 0,
				0,
				ROUND(
					d.last_value /
					(
						SELECT 
							MAX(d.last_value)
						FROM
							device d
						WHERE
							d.id_site = #{id_site}
							AND d.id_device_type = #{id_device_type}
							AND d.`status`  = 1
							AND d.is_delete = 0
					) * 100,
					2
				)
			) AS percent_power
		FROM
			device d 
		WHERE
			d.id = #{id}
			AND d.id_site = #{id_site}
			AND d.id_device_type = #{id_device_type}
			AND d.`status`  = 1 
			AND d.is_delete = 0
	</select>
	
	<select id="getListDeviceParameter" resultType="Map">
		SELECT
			dp.id,
			dp.`name`,
			CONCAT(dp.`name`, IF(dps.scale IS NULL, "", CONCAT(" (Scale: ", dps.scale, ")"))) AS text,
			dps.scale
		FROM
			device_parameters dp
			LEFT JOIN device d ON d.id_device_group = dp.id_device_group
			LEFT JOIN device_parameter_scale dps ON dps.id_device_parameter = dp.id AND dps.id_device = d.id
		WHERE
			d.id = #{id}
			AND d.status = 1
			AND d.is_delete = 0
			AND dp.status = 1
			AND dp.is_delete = 0
		ORDER BY dp.id
	</select>
	
	<select id="getListScaledDeviceParameter" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			dps.scale AS parameter_scale,
			dps.variable_name,
			dp.slug AS parameter_slug
		FROM
			device_parameter_scale dps
			LEFT JOIN device_parameters dp ON dp.id = dps.id_device_parameter
		WHERE
			dps.id_device = #{id}
			AND dps.scale IS NOT NULL
	</select>
	
	<insert id="saveDeviceParameterScale">
		INSERT INTO `device_parameter_scale` (
			`id_device`,
			`id_device_parameter`,
			`scale`,
			`variable_name`
		) VALUES (
			#{id},
			#{id_device_parameter},
			#{parameter_scale},
			#{variable_name}
		) ON DUPLICATE KEY UPDATE
			`id_device` = VALUES(id_device),
			`id_device_parameter` = VALUES(id_device_parameter),
			`scale` = VALUES(scale),
			`variable_name` = VALUES(variable_name)
	</insert>
	
</mapper>