<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CalculationMeasuredProduction">
	
	
	<select id="getListDevice" resultType="com.nwm.api.entities.CalculationMeasuredProductionEntity">
		SELECT
			null AS time,
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type,
			s.data_send_time,
			null AS start_date,
			null AS end_date,
			null AS MeasuredProduction,
			t.`offset` AS time_zone_value,
			d.view_tablename,
			d.job_tablename
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND d.id_device_type IN (1,3)
			<if test="id_site > 0">
				AND d.id_site = #{id_site}
			</if>
	</select>
	
	
	
	
	
	
	
	<update id="updateModelMeasuredProduction">
		
	
	
		UPDATE model_shark100 dv
		JOIN (
					SELECT
						dv.time,
						dv.id_device,
						FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV IF(s.data_send_time = 2, 900, 300)  )* IF(s.data_send_time = 2, 900, 300), '%Y-%m-%d %H:%i' ) AS time_group_by,
						ROUND( IFNULL(ROUND(IF(MIN(dv.nvmActiveEnergy) IS NULL OR dv1.nvmActiveEnergy IS NULL OR MIN(dv.nvmActiveEnergy) <![CDATA[<=]]> 0 OR dv1.nvmActiveEnergy <![CDATA[<=]]> 0, NULL, GREATEST(MIN(dv.nvmActiveEnergy) - dv1.nvmActiveEnergy, 0)), 2), 0.001), 2) AS MeasuredProduction
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site
						LEFT JOIN time_zone t ON t.id = s.id_time_zone 
						LEFT JOIN (
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300))*IF(s.data_send_time = 2, 900, 300)), '%m-%d-%Y %H:%i' ) AS time_format,
								MIN(dv.nvmActiveEnergy) as nvmActiveEnergy
								FROM
									${datatablename} dv
									LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								dv.id_device = #{id}
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN SUBTIME( #{start_date}, '0:5:0') AND SUBTIME( #{end_date}, '0:5:0'))
							GROUP BY time_format
						) dv1 ON UNIX_TIMESTAMP(CONVERT_TZ( dv1.time, '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300) = UNIX_TIMESTAMP(CONVERT_TZ( SUBTIME(dv.time, '0:5:0'), '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300)
					WHERE
						dv.id_device = #{id}
						AND (
							CAST(
								CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME 
							) BETWEEN CAST( #{start_date} AS DATETIME ) 
						AND CAST( #{end_date} AS DATETIME ))
						
						GROUP BY time_group_by 
						ORDER BY time_group_by ASC
		) vals ON dv.time = vals.time AND dv.id_device = vals.id_device
		SET dv.MeasuredProduction = vals.MeasuredProduction;
	
	
	</update>
	
	
	
	<select id="getListDeviceUpdateMeasuredProductionFTP" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			null AS time,
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type,
			s.data_send_time,
			null AS start_date,
			null AS end_date,
			null AS MeasuredProduction,
			t.`offset` AS timezone_value,
			d.view_tablename,
			d.job_tablename
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND d.id_device_group IN (48,46,31,32)
			<if test="id_site > 0">
				AND d.id_site = #{id_site}
			</if>
	</select>
	
	<update id="updateDeviceMeasuredProduction">
		UPDATE ${datatablename} dv
		LEFT JOIN (
			SELECT 
				time,
				IF(nvmActiveEnergy IS NULL OR (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) IS NULL OR nvmActiveEnergy <![CDATA[<=]]> 0 OR (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) <![CDATA[<=]]> 0, 0, ROUND( GREATEST( (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) - nvmActiveEnergy, 0), 0) ) AS MeasuredProduction
			FROM 
				${datatablename}
			WHERE
				id_device = #{id}
		) t ON t.time = dv.time
		SET dv.MeasuredProduction = t.MeasuredProduction
		WHERE dv.id_device = #{id}
	</update>
	
	
	
	
	
	
	
	
	
	
  	
</mapper>