<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesDevices">
	<select id="getListDeviceByIdSite" resultType="Map" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.serial_number,
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_device_group,
			d.devicename,
			d.datatablename,
			dt.`name` AS device_type_name,
			dt.image,
			d.id_device_type,
			d.order_id,
			s.datalogger_ip,
			dt.alias AS device_type_alias,
			DATE_FORMAT( CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) , '%m/%d/%Y %H:%i %p') AS last_updated,
			CASE
				WHEN d.datatablename = 'model_lufft_class8020' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ),2), "W/m²" )
				WHEN d.datatablename = 'model_abb_trio_class6210' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_shark100' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_veris_industries_e51c2_power_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_advanced_energy_solaron' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_imtsolar_class8000' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value * 0.1, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_w_kipp_zonen_rt1' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_satcon_pvs357_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_chint_solectria_inverter_class9725' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))  
				WHEN d.datatablename = 'model_kippzonen_rt1_class8009' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_ivt_solaron_ext' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_pvp_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_rt1_class30000' THEN CONCAT_WS(" ", IFNULL(d.last_value, 0 ), "W/m²" )
				WHEN d.datatablename = 'model_elkor_production_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_elkor_wattson_pv_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_pv_powered_35_50_260_500kw_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_solectria_sgi_226ivt' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_datalogger' THEN "N/A"				
				WHEN d.datatablename = 'model_tti_tracker' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "Degrees" ))
				WHEN d.datatablename = 'model_xantrex_gt100_250_500' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_umg604' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_sg110cx' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_sg50cx' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_weather_pvmet75200' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sma_inverter_stp1200tlus10' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sma_inverter_stp24ktlus10' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sma_cluster_controller' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))	
				ELSE "N/A"
			END AS key_indicator,
			IFNULL(p.totalError, 0 ) AS totalError,
			CASE
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit
			
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT a.id_device, COUNT(a.id) AS totalError FROM alert a 
				LEFT JOIN device d ON d.id = a.id_device
				WHERE a.`status` = 1 AND d.`status` = 1 AND d.id_site = #{id_site} GROUP BY d.id
			) p ON p.id_device = d.id
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0 
			
			order by
	        <choose> 
	        	<when test="sort_column == 'id'">
	                d.id ${order_by}
	            </when> 
	            
	        	<when test="sort_column == 'order_id'">
	                d.order_id ${order_by}
	            </when> 
	            
	            <when test="sort_column == 'devicename'">
	                d.devicename ${order_by}
	            </when>         
	            <when test="sort_column == 'id_device_type'">
	                d.id_device_type ${order_by}
	            </when>
	            <when test="sort_column == 'last_value'">
	                d.last_value ${order_by}
	            </when>
	            
	            <when test="sort_column == 'last_updated'">
	                d.last_updated ${order_by}
	            </when>
	            
	            <otherwise>
			      d.order_id ASC
			    </otherwise>                                                  
	        </choose>  
		 LIMIT ${limit} OFFSET ${offset};
		 
	</select>
	
	<select id="getDeviceDetail" resultType="com.nwm.api.entities.DeviceEntity" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.devicetype,
			d.deviceclass,
			d.configuration,
			d.configurationchecksum,
			d.configurationchangetime,
			d.datatablename,
			dt.`name` AS device_type_name,
			dt.image,
			s.name AS site_name,
			CONCAT_WS(" ", DATE_FORMAT( CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), '%m/%d/%Y %H:%i:%s %p' ), t.abbreviation_std) AS last_communication,
			t.abbreviation_std,
			t.`value` AS timezone,
			g.total_error,
			s.kiosk_view
			
			
			
		FROM
			device AS d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT COUNT(a.id) AS total_error, d.id_site 
				FROM device d 
					LEFT JOIN alert a ON a.id_device = d.id
				WHERE SHA1(d.id_site) = #{hash_id} OR d.id_site = #{id_site} AND d.`status` = 1 AND a.`status` = 1
			)g ON g.id_site = d.id_site
		WHERE
			SHA1(d.id) = #{hash_id}
			AND sem.id_employee = #{id_employee};
	</select>
	
	<select id="getModelLastRowItem" resultType="Map" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			<if test="datatablename == 'model_imtsolar_class8000'">
    			ROUND((u.irradiance * 0.1), 2) AS irradiance,
		        ROUND((u.tcell * 0.1 - 25), 2) AS tcell,
    		</if>
			u.*,
			CONCAT_WS(" ", DATE_FORMAT( CONVERT_TZ( u.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:%i:%s %p' ), t.abbreviation_std) AS last_communication
		FROM
			${datatablename} u 
			LEFT JOIN device d ON u.id_device = d.id
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		
		WHERE
			SHA1(u.id_device) = #{hash_id} 
			
		ORDER BY
			`time` DESC 
			LIMIT 1;
	
  	</select>
  	
  	<select id="getListDeviceParameter" resultType="com.nwm.api.entities.DeviceParameterEntity" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			dp.id,
			dp.`name`,
			dp.slug,
			dp.unit,
			dp.chart_type,
			dp.description,
			dp.register,
			dp.hide,
			dp.standard_alert_message
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group 
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
		WHERE
			SHA1(d.id) = #{hash_id} AND d.`status` = 1 AND dp.`status` = 1;
	</select>
	
	
  	
  	
	
	
	
</mapper>