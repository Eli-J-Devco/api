<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Portfolio">
	<resultMap id="PortfolioMap"
		type="com.nwm.api.entities.PortfolioEntity">
		<result property="id" column="id" />
		<result property="id_customer" column="id_customer" />
		<result property="id_country" column="id_country" />
		<result property="id_time_zone" column="id_time_zone" />
		<result property="name" column="name" />
		<result property="street" column="street" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
		<result property="built_since" column="built_since" />
		<result property="old_data" column="old_data" />
		<result property="number" column="number" />
		<result property="postal_code" column="postal_code" />
		<result property="city" column="city" />
		<result property="state" column="state" />
		<result property="commissioning" column="commissioning" />
		<result property="emergency_contact" column="emergency_contact" />
		<result property="ac_capacity" column="ac_capacity" />
		<result property="dc_capacity" column="dc_capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="address_short" column="address_short" />
		<result property="watts_3ph_total" column="watts_3ph_total" />
		<result property="sensor1_data" column="sensor1_data" />
		<result property="w_hours_total" column="w_hours_total" />
		<result property="today_kwh" column="today_kwh" />
		<result property="total_energy_this_month" column="total_energy_this_month" />
		<result property="eer_this_month" column="eer_this_month" />
		<result property="eer_last_month" column="eer_last_month" />
		<result property="w_hours_received" column="w_hours_received" />
		<result property="total_error" column="total_error" />
		<result property="alert_list" column="alert_list" />
		<result property="gallery" column="gallery" />
		<result property="street_ws" column="street_ws" />
		<result property="localization_format" column="localization_format" />
		<result property="format_sql_short" column="format_sql_short" />
		<result property="format_sql_long" column="format_sql_long" />
		<result property="format_sql_string_short" column="format_sql_string_short" />
		<result property="format_sql_string_long" column="format_sql_string_long" />
		<result property="format_sql_string_mdy" column="format_sql_string_mdy" />
		<result property="offset_from" column="offset_from" />
		<result property="current_time" column="current_time" />
		<result property="energy_now" column="energy_now" />
		<result property="value_filter" column="value_filter" />
		<result property="column" column="column" />
		<result property="weather_icon" column="weather_icon" />
		<result property="weather_description" column="weather_description" />
		<result property="is_rec_report" column="is_rec_report" />
		<result property="kiosk_view" column="kiosk_view" />
		
	</resultMap>
	
	
	<select id="getList" resultType="Map" >
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			IF(er.total_error,er.total_error, 0) AS total_error,
			s.`name`,
			s.lat,
			s.lng,
			s.street,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			s.kiosk_view,
			IFNULL(s.ac_capacity, 0) as ac_capacity,
			IFNULL(s.dc_capacity, 0) as dc_capacity,
			s.gallery,
			DATE_FORMAT(s.built_since,'%m/%d/%Y') AS built_since,
			c.name AS company_name,
			IFNULL(t.irradiance, 0 ) AS irradiance,
			IF( ivt.activePower IS NULL, ROUND(m.activePower,2), ROUND(ivt.activePower,2)) AS activePower,
			s.weather_icon,
			s.weather_description,
			s.id_company,
			s.is_rec_report,
			p.last_updated,
			p.times_ago,
			p.times_ago_unit,
			IFNULL(p.unix_time, 0) AS unix_time,
			IFNULL(eerm.EERLastMonth, 0) AS EERLastMonth,
			IFNULL(eerthism.EERThisMonth, 0) AS EERThisMonth,
			ROUND(s.PerformanceRatioYesterday, 1) AS PerformanceRatioYesterday,
			s.note
			
				
		FROM
			site s
			LEFT JOIN company c ON c.id = s.id_company
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					CASE
						WHEN d.datatablename = 'model_adam4017ws_class8110_nelis190'  THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_lufft_class8020' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_lufft_ws501_umb_weather' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_imtsolar_class8000' THEN ROUND( SUM(d.last_value) * 0.01, 2)
						WHEN d.datatablename = 'model_hukseflux_sr30d1_deviceclass_v0' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_imtsolar_tmodul_class8006' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_w_kipp_zonen_rt1' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_kippzonen_rt1_class8009' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_rt1_class30000' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename = 'model_tti_tracker' THEN ROUND( SUM(d.last_value), 2)
						ELSE "N/A"
				 	END AS irradiance
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id 
				WHERE
					d.id_device_type = 4 
					AND s.`status` = 1 
					AND d.`status` = 1 
				GROUP BY
					s.id
			)t ON t.id_site = s.id
			
			
			LEFT JOIN (
				SELECT 
					eermonth.id,
					ROUND((eermonth.ActualGeneration / eermonth.EstimatedGeneration)*100 , 1 ) AS EERLastMonth
				FROM (
					SELECT
						s.id,
						SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)) AS ActualGenerationMeter,
						SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)) AS ActualGenerationInverter,
						IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))), (SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0))) ) AS ActualGeneration,
						CASE
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
							 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) ) = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )))
						END as EstimatedGeneration
					FROM
						site_data_report sdr 
						LEFT JOIN device d ON d.id = sdr.id_device
						LEFT JOIN site s ON s.id = d.id_site
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						s.`status` = 1
						AND d.`status` = 1
						AND s.is_delete = 0
						AND d.is_delete = 0
						AND (sdr.time BETWEEN date_add(date_add(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH),interval 1 DAY),interval -1 MONTH) AND LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`) - INTERVAL 1 MONTH) )
						GROUP BY s.id
				)eermonth 
			)eerm ON eerm.id = s.id
			
			
			LEFT JOIN (
			
			SELECT 
				eerthismonth.id,
				ROUND((eerthismonth.ActualGeneration / eerthismonth.EstimatedGeneration)*100 , 1 ) AS EERThisMonth
			FROM (
				SELECT
					s.id,
					SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)) AS ActualGenerationMeter,
					SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)) AS ActualGenerationInverter,
					IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))), (SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0))) ) AS ActualGeneration,
					
					CASE
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
						 when MONTH(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) ) = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site= s.id AND `year`= YEAR(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )))
					END as EstimatedGeneration
				FROM
					site_data_report sdr 
					LEFT JOIN device d ON d.id = sdr.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.`status` = 1
					AND d.`status` = 1
					AND s.is_delete = 0
					AND d.is_delete = 0
					AND (sdr.time BETWEEN date_add(date_add(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)),interval 1 DAY),interval -1 MONTH) AND LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )
					GROUP BY s.id
			)eerthismonth 
			
			)eerthism ON eerthism.id = s.id
			
		
			
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					SUM( d.last_value ) AS activePower 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id 
				WHERE
					d.id_device_type = 1
					AND s.`status` = 1 
					AND d.`status` = 1 
				GROUP BY
					s.id
			)m ON m.id_site = s.id 
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					SUM( d.last_value ) AS activePower 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id 
				WHERE
					d.id_device_type = 3
					AND s.`status` = 1 
					AND d.`status` = 1 
				GROUP BY
					s.id
			)ivt ON ivt.id_site = s.id
			
			
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					COUNT( a.id ) AS total_error 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id
					RIGHT JOIN alert a ON a.id_device = d.id 
					AND a.`status` = 1
					LEFT JOIN error er ON a.id_error = er.id
				GROUP BY s.id 
			) er ON er.id_site = s.id
			
			LEFT JOIN (
			 SELECT
					d.id_site,
					DATE_FORMAT(CONVERT_TZ( md.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:%i:%s %p' ) AS last_updated,
					UNIX_TIMESTAMP(md.time)  AS unix_time,
					
					CASE
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( md.time, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( md.time, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( md.time, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
								ELSE 0
							END AS times_ago,

							CASE
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
								WHEN CONVERT_TZ( md.time, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
							END AS times_ago_unit
							
				FROM
					model_datalogger md
					LEFT JOIN device d ON d.id = md.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone 
					LEFT JOIN site_employee_map sem ON sem.id_site = s.id
				WHERE
					d.id_device_group = 19 AND sem.id_employee = #{id_employee} AND s.`status` = 1 AND s.is_delete = 0 AND d.`status` = 1 AND d.is_delete = 0
					GROUP BY s.id
					ORDER BY unix_time ASC
			)p ON p.id_site = s.id
			
		WHERE s.status = 1 and s.is_delete = 0 AND sem.id_employee = #{id_employee}
		
		
		<if test="column == 1 and value_filter != null">
			AND s.name LIKE CONCAT("%",#{value_filter}, "%")
		</if>
		
		<if test="column == 2 and value_filter != null">
			AND s.id = #{value_filter}
		</if>
		
		<if test="column == 3 and value_filter != null">
			AND s.dc_capacity = #{value_filter}
		</if>
		
		<if test="column == 4 and value_filter != null">
			AND s.built_since = #{value_filter}
		</if>
		
		<if test="column == 5 and value_filter != null">
			AND c.name LIKE CONCAT("%",#{value_filter}, "%")
		</if>
		
		
		<if test="name != null">
			AND s.name LIKE CONCAT("%",#{name}, "%")
		</if>
		
		
		<if test="id_company != null and id_company != 0">
			AND s.id_company = #{id_company}
		</if>
		
		<if test="id_sites != null">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=" , ">
					#{item.id}
				</foreach>
			)
		</if>
				
		order by
	        <choose> 
	       		<when test="sort_column == 'is_rec_report'">
	                s.is_rec_report ${order_by}
	            </when>
	             
	            <when test="sort_column == 'name'">
	                s.name ${order_by}
	            </when>     
	                
	            <when test="sort_column == 'dc_capacity'">
	                s.dc_capacity ${order_by}
	            </when>
	            
	            <when test="sort_column == 'EERThisMonth'">
	                EERThisMonth ${order_by}
	            </when>
	            
	            <when test="sort_column == 'EERLastMonth'">
	                EERLastMonth ${order_by}
	            </when>
	            
	            <when test="sort_column == 'PerformanceRatioYesterday'">
	                s.PerformanceRatioYesterday ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'total_error'">
	                total_error ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'kiosk_view'">
	                s.kiosk_view ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'id_company'">
	                s.id_company ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'energy_now'">
	                activePower ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'weather'">
	                s.weather_icon ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'irradiance'">
	                irradiance ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'built_since'">
	                s.built_since ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'last_updated'">
	                p.last_updated ${order_by}
	            </when>
	            
	            
	            <otherwise>
			      s.`name`, s.id_company ASC
			    </otherwise>                                                  
	        </choose>  
       LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getListAlertBySite" resultType="Map" >
		SELECT
			s.id AS id_site,
			COUNT( a.id ) AS total_error,
			i.icon AS icon_alert
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id
			RIGHT JOIN alert a ON a.id_device = d.id AND a.`status` = 1
			LEFT JOIN error er ON a.id_error = er.id 
			LEFT JOIN error_level el ON el.id = er.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			WHERE s.id = #{id} AND a.`status` = 1 AND er.`status` = 1 AND s.`status` = 1 AND el.`status` = 1
		GROUP BY s.id, el.id
	</select>
	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.PortfolioEntity">
    	SELECT count(*) as totalRow
		FROM site s
		WHERE s.status = 1
		
		<if test="name != null">
			AND s.name LIKE CONCAT("%",#{name}, "%")
		</if>
		
		<if test="id_sites != null">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=" , ">
					#{item.id}
				</foreach>
			)
		</if>
		
  	</select>
  	
  	
  	<select id="getAlertSummary" resultType="com.nwm.api.entities.PortfolioEntity" parameterType="com.nwm.api.entities.PortfolioEntity">
		SELECT (
			SELECT
				COUNT( s.id ) AS totalSite 
			FROM
				site s
			WHERE
				 s.`status` = 1 
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND s.id IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalSite,
		(
			SELECT
				COUNT(*) AS totalAlert 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
			WHERE
				a.`status` = 1 
				AND e.`status` = 1 
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND d.id_site IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalAlert,
		
		(
			SELECT
				SUM( d.last_value ) AS totalPower 
			FROM
				site s
				LEFT JOIN device d ON d.id_site = s.id
			WHERE
				d.id_device_type = 1
				AND s.`status` = 1 
				AND d.`status` = 1 
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND s.id IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalPower
			
  	</select>
	
	<select id="getInverterDeviceStatus" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			IFNULL(d.last_value, 0) as active_power,
			IF ((d.last_value IS NULL) OR (d.rating_ac_power IS NULL) OR (d.rating_ac_power = 0), 0, d.last_value / d.rating_ac_power * 100) AS percent_power_status
		FROM
			device d
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 1
	</select>
	
	<select id="getMeterDeviceStatus" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			IFNULL(d.last_value, 0) as active_power,
			IF ((d.last_value IS NULL) OR (d.rating_ac_power IS NULL) OR (d.rating_ac_power = 0), 0, d.last_value / d.rating_ac_power * 100) AS percent_power_status
		FROM
			device d
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 3
	</select>
	
	<update id="updateNote">
		UPDATE `site`
		SET
			`note` = #{note}
		WHERE
			`id` = #{id}
	</update>
	
</mapper>