<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesDashboard">
	<select id="getDetail" resultType="com.nwm.api.entities.SitesDevicesEntity" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			CONCAT_WS( ", ", s.city, s.postal_code ) AS address_short,
			CONCAT_WS( ", ", s.number, s.street ) AS street_ws,
			s.id,
			SHA1(s.id) AS hash_id,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.lat,
			s.lng,
			s.old_data,
			s.number,
			s.street,
			s.postal_code,
			s.city,
			s.state,
			DATE_FORMAT( s.commissioning, '%m/%d/%Y %H:%s:%i' ) AS commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.`status`,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.data_send_time,
			s.kiosk_view,
			DATE_FORMAT( s.built_since, '%m/%d/%Y %H:%s:%i' ) AS built_since,
			c.`name` AS country_name,
			s.gallery,
			c.localization_format,
			c.format_sql_short,
			c.format_sql_long,
			c.format_sql_string_short,
			c.format_sql_string_long,
			c.format_sql_string_mdy,
			s.data_send_time,
			t.value AS timezone_value,
			t.offset AS timezone_offset,
			s.is_rec_report,
			s.datalogger_ip,
			s.cf_start_time,
			s.cf_end_time,
			s.cf_alert_threshold,
			IF(s.cf_email_subscribers IS NULL || s.cf_email_subscribers = '',t.cf_email_subscribers,s.cf_email_subscribers) AS cf_email_subscribers,
			g.total_error
		FROM
			site s 
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN country c ON c.id = s.id_country
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN (
				SELECT sem.id_site, GROUP_CONCAT(e.email) AS cf_email_subscribers FROM site_employee_map sem
				LEFT JOIN employee e ON e.id = sem.id_employee
				WHERE 
				SHA1(sem.id_site) = #{hash_id}
			)t ON t.id_site = s.id
			
			LEFT JOIN(
				SELECT
					COUNT( a.id ) AS total_error,
					d.id_site 
				FROM
					device d
					LEFT JOIN alert a ON a.id_device = d.id 
					LEFT JOIN error e ON e.id = a.id_error
				WHERE
					SHA1(d.id_site) = #{hash_id}
					AND d.`status` = 1 
					AND a.`status` = 1
					AND e.`status` = 1 
					AND e.is_delete = 0
			)g ON g.id_site = s.id
		WHERE
			SHA1(s.id) = #{hash_id}
			AND sem.id_employee = #{id_employee}
			AND s.`status` = 1 
			AND s.is_delete = 0 GROUP BY s.id
	</select>
	
	<select id="getListDeviceIsDisableAlert" resultType="Map">
		SELECT
			d.*
			
		FROM
			device d
		WHERE
			SHA1(d.id_site) = #{hash_id} AND d.disable_alert = 1
	</select>
	
	
	<select id="getListAlertByIdDevice" resultType="Map">
		SELECT
			l.id,
			SHA1(l.id) AS hash_id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,			
			IF(l.`status` = 1, 'Opened', 'Closed') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			s.`name` AS site_name,
			s.id AS id_site,
			SHA1(s.id) AS hash_site_id,
			d.id as id_device,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %H:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS end_date,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit
			
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE e.`status` = 1 AND e.is_delete = 0 AND d.id = #{id_device}
			AND l.is_delete = 0 AND l.`status` = 1
			GROUP BY l.id 
			LIMIT #{limit} OFFSET #{offset};
	</select>
	
	
	
	
	<select id="getListDeviceByIdSite" resultType="Map">
		SELECT
			d.serial_number,
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_device_group,
			d.devicename,
			d.datatablename,
			d.id_device_type,
			d.order_id,
			dt.`name` AS device_type_name,
			dt.image,
			s.datalogger_ip,
			DATE_FORMAT( CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) , '%m-%d-%Y %H:%i %p') AS last_updated,
			p.totalError,
			CASE
				WHEN d.datatablename = 'model_lufft_class8020' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ),2), "W/m²" )
				WHEN d.datatablename = 'model_abb_trio_class6210' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_shark100' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_veris_industries_e51c2_power_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_advanced_energy_solaron' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_imtsolar_class8000' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value * 0.1, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_w_kipp_zonen_rt1' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_satcon_pvs357_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_chint_solectria_inverter_class9725' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))  
				WHEN d.datatablename = 'model_kippzonen_rt1_class8009' THEN CONCAT_WS(" ", ROUND(IFNULL(d.last_value, 0 ), 2), "W/m²" )
				WHEN d.datatablename = 'model_ivt_solaron_ext' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_pvp_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_rt1_class30000' THEN CONCAT_WS(" ", IFNULL(d.last_value, 0 ), "W/m²" )
				WHEN d.datatablename = 'model_elkor_production_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_elkor_wattson_pv_meter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_pv_powered_35_50_260_500kw_inverter' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_solectria_sgi_226ivt' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_tti_tracker' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "Degrees" ))
				WHEN d.datatablename = 'model_xantrex_gt100_250_500' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_umg604' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_sg110cx' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_sg50cx' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sungrow_weather_pvmet75200' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				
				WHEN d.datatablename = 'model_sma_inverter_stp1200tlus10' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sma_inverter_stp24ktlus10' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))
				WHEN d.datatablename = 'model_sma_cluster_controller' THEN IF(d.last_value = -1 or d.last_value IS NULL, "N/A", CONCAT_WS(" ", ROUND(d.last_value, 2), "kW" ))		
				ELSE "N/A"
			END AS key_indicator,
			
			CASE
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit
			
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT a.id_device, COUNT(a.id) AS totalError FROM alert a 
				LEFT JOIN device d ON d.id = a.id_device
				WHERE a.`status` = 1 AND d.`status` = 1 AND d.id_site = #{id_site} GROUP BY d.id
			) p ON p.id_device = d.id
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0
			
		ORDER BY
	        <choose> 
	       		<when test="sort_column == 'order_id'">
	                d.order_id ${order_by}
	            </when>
	             
	            <when test="sort_column == 'devicename'">
	                d.devicename ${order_by}
	            </when>     
	                
	            <when test="sort_column == 'key_indicator'">
	                key_indicator ${order_by}
	            </when>
	            
	            <when test="sort_column == 'times_ago'">
	                last_updated ${order_by}
	            </when>
	            
	            <otherwise>
			      d.id_device_type DESC
			    </otherwise>                                                  
	        </choose>
	</select>
	
  	
  	<select id="getListDeviceTypeMeter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 3 
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	<select id="getListDeviceTypeInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 1
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
  	<select id="getGeneration" resultType="Map" >
		SELECT
			s.id,
			s.`name`,
			s.dc_capacity,
			s.ac_capacity,
			s.lat,
			s.lng,
			s.data_send_time,
			t.`offset`,
			IFNULL(this_month.nvmActiveEnergy, 0) AS energy_this_month,
			
			ROUND(today.power_today, 1) AS power_today,
			IFNULL(today.nvmActiveEnergy, 0) AS totalGeneration
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT 
					d.id_site,
					IF( (SUM(IF(d.id_device_type = 3, d.energy_today, 0))) > 0, (SUM(IF(d.id_device_type = 3, d.energy_today, 0))), (SUM(IF(d.id_device_type = 1, d.energy_today, 0))) ) AS nvmActiveEnergy,
					IF( (SUM(IF(d.id_device_type = 3, d.last_value, 0))) > 0, (SUM(IF(d.id_device_type = 3, d.last_value, 0))), (SUM(IF(d.id_device_type = 1, d.last_value, 0))) ) AS power_today
					FROM device d 
					WHERE 
					d.`status` = 1 
					AND d.is_delete = 0
					AND d.id_site  = #{id_site}
			)today ON today.id_site = s.id
			
			LEFT JOIN(
				SELECT
					s.id,
					IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))), (SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0))) ) AS nvmActiveEnergy
				FROM
					site_data_report sdr 
					LEFT JOIN device d ON d.id = sdr.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.`status` = 1
					AND d.`status` = 1
					AND d.id_site  = #{id_site}
					AND s.is_delete = 0
					AND d.is_delete = 0
					AND (sdr.time BETWEEN date_add(date_add(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)),interval 1 DAY),interval -1 MONTH) AND LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )
					GROUP BY s.id
			)this_month ON this_month.id = s.id
			
						
		WHERE
					s.id = #{id_site}
					AND s.`status` = 1 
					AND s.is_delete = 0;
	</select>
	
	
	
</mapper>